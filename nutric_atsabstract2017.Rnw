%% -- Specially formatted Latex comment tells RStudio to compile PDF with knitr
% !Rnw weave = knitr

\documentclass{article}

%\usepackage[margin=.5in, landscape]{geometry} %resets margins
\usepackage[margin=.5in]{geometry} %resets margins
\usepackage{hyperref}
\usepackage{lscape}
\usepackage{pdfpages}
\usepackage[section]{placeins}

\title{NUTRIC Scores vs. Mortality, Cognitive and Functional Outcomes\\BRAIN-ICU Cohort Only, for ATS 2017 Abstract}
\date{\today}
\author{Jennifer Thompson, MPH; Supervisor: Rameela Chandrasekhar, PhD}
\begin{document}
% \begin{landscape}
\maketitle
\tableofcontents
\listoftables
\listoffigures
\clearpage

<<setup, include=FALSE, results='hide', cache=FALSE>>=
opts_chunk$set(echo=FALSE, warning = FALSE, message = FALSE, cache = FALSE, error = FALSE, results='hide', fig.width=7, fig.height=(7/1.618), fig.align='center', fig.pos='!h')
options(replace.assign = TRUE, width = 90)

library(devtools)
library(mice)
library(MASS)
library(pscl)
library(rms)
library(caTools)
library(ggplot2)
library(dplyr)
library(tidyr)
library(GGally) ## for ggsurv()
library(zoo) ## for na.locf

if(Sys.info()['sysname'] == 'Darwin'){
  load('/Volumes/thomps23/ICUDelirium/BRAINICU/braindata.Rdata')
  source('/Volumes/thomps23/ICUDelirium/timevarying_data.r')
  source(file.path('/', 'Volumes', 'thomps23', 'R', 'multiplot.r'))
} else{
  load('/home/thomps23/ICUDelirium/BRAINICU/braindata.Rdata')
  source('/home/thomps23/ICUDelirium/timevarying_data.r')
  source(file.path('/', 'home', 'thomps23', 'R', 'multiplot.r'))
}

## Method to use in pool.compare() for getting p-values from imputed negative binomial models
use.method <- 'Wald'

## Function to round and format a number to the same number of digits (default = 2)
rndformat <- function(x, digits = 2){
  format(round(x, digits = digits), nsmall = digits)
}

## Function to format p-values
formatp <- function(p){
  ifelse(p < 0.0001, '<0.0001',
  ifelse(p < 0.001, '<0.001',
         rndformat(p, digits = 3)))
}

@

The following analyses look for associations between NUTRIC scores at ICU admission and long-term
outcomes, including mortality, discharge location, disability, and cognition. These initial analyses
use only the BRAIN-ICU cohort for ATS abstract submission; MIND-ICU patients will be added later.

\section{Cohort Descriptions}
<<cohortvars>>=
## Indicator for whether patient had at least partial followup data (any outcomes)
brain.fu$any.outcomes <- rowSums(!is.na(brain.fu[,c('mmse.tscore', 'trail.a.tscore',
                                                    'trail.b.tscore', 'rbans.immmemory.tscore',
                                                    'rbans.visuo.tscore', 'rbans.language.tscore',
                                                    'rbans.attention.tscore',
                                                    'rbans.delayedmem.tscore', 'rbans.global.score',
                                                    'faq.totscore', 'adl.totscore', 'sf36.pcs',
                                                    'sf36.mcs')])) > 0

## All patients with usable data
brain.oneobs$cohort.allpts <- with(brain.oneobs, {
  !(!is.na(studywd.amt) &
      studywd.amt %in% c('2. W/D from Participation and All Data Collected',
                         '4. N/A Study Staff Withdrew Patient')) })
n.allpts <- sum(brain.oneobs$cohort.allpts)

## All patients who can be included in in-hospital mortality (exclude anyone who never had
## mental status measured or who had missing baseline covariates; daily sepsis and SOFA will be
## imputed using LOCF)
no.mental.data <- brain.daily %>%
  group_by(id) %>%
  summarise(n.mental = sum(!is.na(mental.stat.imp))) %>%
  filter(n.mental == 0)
no.mental.pts <- no.mental.data$id
n.nomental <- length(no.mental.pts)

brain.oneobs$no.days.mental <- brain.oneobs$id %in% no.mental.pts

## Determine how many patients are missing baseline covariates
baseline.covar <- c('edu', 'frailty', 'sex.pp', 'bmi', 'iqcode.score.e', 'adl.e', 'faq.e')
brain.oneobs$miss.base.covar <- rowSums(is.na(brain.oneobs[,baseline.covar])) > 0

## Cohort for all mortality models = >=1 day with mental status + no missing baseline covariates
brain.oneobs$cohort.mort <-
  with(brain.oneobs, cohort.allpts & !(no.days.mental | miss.base.covar))
n.mort <- sum(brain.oneobs$cohort.mort)

## All patients with usable data and a full NUTRIC score at baseline
brain.oneobs$cohort.allpts.il6 <- with(brain.oneobs, cohort.allpts & !is.na(nutric.il6))
brain.oneobs$cohort.mort.il6 <- with(brain.oneobs, cohort.mort & !is.na(nutric.il6))

n.allpts.il6 <- sum(brain.oneobs$cohort.allpts.il6)
n.mort.il6 <- sum(brain.oneobs$cohort.mort.il6)

## All hospital survivors who remained in study
brain.oneobs$cohort.survivors <- with(brain.oneobs, {
  cohort.allpts &
    died.inhosp == 'Alive through or withdrew during hospital stay' &
    (is.na(studywd) | studywd == 'No') })
n.survivors <- sum(brain.oneobs$cohort.survivors)

## All hospital survivors who remained in study and had full NUTRIC at baseline
brain.oneobs$cohort.survivors.il6 <- with(brain.oneobs, cohort.survivors & !is.na(nutric.il6))
n.survivors.il6 <- sum(brain.oneobs$cohort.survivors.il6)

## All patients with long-term outcomes at each time point
brain.oneobs$cohort.3m <- with(brain.oneobs, {
  cohort.survivors & id %in% subset(brain.fu, fu.period == '3 Month' & any.outcomes)$id })
n.3m <- sum(brain.oneobs$cohort.3m)

brain.oneobs$cohort.3m.il6 <- with(brain.oneobs, cohort.3m & !is.na(nutric.il6))
n.3m.il6 <- sum(brain.oneobs$cohort.3m.il6)

brain.oneobs$cohort.12m <- with(brain.oneobs, {
  cohort.survivors & id %in% subset(brain.fu, fu.period == '12 Month' & any.outcomes)$id })
n.12m <- sum(brain.oneobs$cohort.12m)

brain.oneobs$cohort.12m.il6 <- with(brain.oneobs, cohort.12m & !is.na(nutric.il6))
n.12m.il6 <- sum(brain.oneobs$cohort.12m.il6)

## Total number of patients with any long-term outcomes
brain.oneobs$cohort.lt <- with(brain.oneobs, cohort.3m | cohort.12m)
n.lt <- sum(brain.oneobs$cohort.lt)

brain.oneobs$cohort.lt.il6 <- with(brain.oneobs, cohort.3m.il6 | cohort.12m.il6)
n.lt.il6 <- sum(brain.oneobs$cohort.lt.il6)

## Add followup variables to main data set
fu.outcomes <- brain.fu %>%
  filter(fu.period %in% c('3 Month', '12 Month')) %>%
  mutate(faq.rdscore = round(faq.totscore)) %>%
  separate(fu.period, into = c('month', 'toss')) %>%
  dplyr::select(id, month, rbans.global.score, trail.b.tscore, faq.rdscore, adl.totscore,
                sf36.pcs, sf36.mcs) %>%
  gather(key = outcome, value = score, rbans.global.score:sf36.mcs) %>%
  mutate(outcome.time = paste(gsub('\\.[a-z]*score$', '', outcome), month, sep = '.')) %>%
  dplyr::select(id, outcome.time, score) %>%
  spread(key = outcome.time, value = score)

brain.oneobs <- merge(brain.oneobs, fu.outcomes, by = 'id', all = TRUE)

## -- Indicators for whether pt nutritionally at risk (NUTRIC with IL6 >=6, without, >=5) ----------
brain.oneobs$nutric.atrisk.il6 <- with(brain.oneobs, factor(ifelse(is.na(nutric.il6), NA,
                                                            ifelse(nutric.il6 >= 6, 2, 1)),
                                                            levels = 1:2,
                                                            labels = c('No', 'Yes')))

brain.oneobs$nutric.atrisk.noil6 <- with(brain.oneobs, factor(ifelse(is.na(nutric.noil6), NA,
                                                              ifelse(nutric.noil6 >= 5, 2, 1)),
                                                              levels = 1:2,
                                                              labels = c('No', 'Yes')))

## -- Indicator for whether patient was discharged to home -----------------------------------------
brain.oneobs$dc.home <- with(brain.oneobs, factor(ifelse(is.na(hospdis.loc), NA,
                                                  as.numeric(hospdis.loc != 'Home')),
                                                  levels = 0:1, labels = c('Home', 'Not home')))

## -- Create a table of the number of patients in each cohort --------------------------------------
cohort.ns <- data.frame(cohort = c('Enrolled patients',
                                   'Mortality outcomes',
                                   'Discharge location',
                                   'Long-term outcomes',
                                   '~~~3 months',
                                   '~~~12 months'),
                        cohort.desc = c('',
                                        'Patients with >=1 day complete data',
                                        'Hospital survivors',
                                        'Patients with at least partial outcomes',
                                        '~~~At least partial outcomes at 3m',
                                        '~~~At least partial outcomes at 12m'),
                        analysis.type = c('', 'CC', 'MI', 'MI', '', ''),
                        n.il6 = c(n.allpts.il6, n.mort.il6, n.survivors.il6,
                                  n.lt.il6, n.3m.il6, n.12m.il6),
                        n.noil6 = c(n.allpts, n.mort, n.survivors, n.lt, n.3m, n.12m))

@

There were \Sexpr{n.allpts} patients enrolled in the BRAIN-ICU cohort with in-hospital data. Table \ref{table:ncohort} describes the number of patients included in each analysis. We will not impute
missing NUTRIC scores due to the involvement of IL-6; therefore different numbers of patients will
be included in models using the full vs. the modified NUTRIC score.

We do not use multiple imputation in mortality analyses due to the complexity of combining multiple imputation with time-varying Cox models and the low amount of missingness; therefore, patients are
included in all mortality models only if they have at least one day of complete ICU data. For all other outcomes, we use multiple imputation to handle missing data other than NUTRIC scores (further
described in Section \ref{section:missingness}). Therefore, all patients who survived their hospital
stay are included in discharge location models, and patients are included in long-term cognitive, disability, and HRQOL analyses if they have at least partial outcomes data at that time point (ie, at least one of MMSE, Trailmaking A or B, any RBANS domain, FAQ, ADL, and/or SF-36 PCS or MCS).

<<printncohort, results = 'asis'>>=
latex(cohort.ns, file = '',
      where = '!h',
      caption = 'Number of Patients in Each Analysis Cohort',
      caption.lot = 'Number of Patients in Each Analysis Cohort',
      label = 'table:ncohort',
      rowname = NULL,
      colheads = c('Outcome', 'Cohort', 'Type*', 'Using Full NUTRIC', 'Using Modified NUTRIC'),
      col.just = c('l', 'l', 'c', 'c', 'c'),
      insert.bottom = '\\emph{\\small{*CC = complete case analysis; MI = multiple imputation}}')

@

Tables \ref{table:descinhosp} and \ref{table:desclt} describe baseline, in-hospital, and followup
characteristics of all three modified-NUTRIC cohorts (patients included in full-NUTRIC analyses are
a subset of this group).

<<desctables>>=
desc.vars <- c('age.enroll', 'sex.pp', 'race.pp', 'edu', 'charlson.score', 'num.comorbid',
               'iqcode.score.e', 'stroke.risk', 'adl.e', 'faq.e', 'frailty', 'icu.type',
               'num.apache', 'sofa', 'nutric.il6', 'nutric.atrisk.il6', 'nutric.noil6',
               'nutric.atrisk.noil6', 'mean.benz.icu', 'mean.op.new.icu', 'mean.prop.icu',
               'mean.dex.icu', 'ever.vent.s', 'vent.los.tot.eo', 'ever.del.s.imp',
               'del.s.imp.eo', 'ever.coma.s.imp', 'coma.s.imp.eo', 'icu.los.tot.s', 'hosp.los.s',
               'died.inhosp', 'hospdis.loc', 'died.brain.90', 'died.brain.365')
lt.vars <- c('rbans.global.3', 'rbans.global.12', 'trail.b.3', 'trail.b.12', 'adl.3', 'adl.12',
             'faq.3', 'faq.12', 'sf36.pcs.3', 'sf36.pcs.12', 'sf36.mcs.3', 'sf36.mcs.12')

desc.data.all <- brain.oneobs[brain.oneobs$cohort.allpts, c('id', desc.vars, lt.vars)]
desc.data.all$cohort <- 1

desc.data.surv <- brain.oneobs[brain.oneobs$cohort.survivors, c('id', desc.vars, lt.vars)]
desc.data.surv$cohort <- 2

desc.data.lt <- brain.oneobs[brain.oneobs$cohort.lt, c('id', desc.vars, lt.vars)]
desc.data.lt$cohort <- 3

desc.data.all <- rbind(desc.data.all, desc.data.surv, desc.data.lt)
desc.data.all$cohort <- factor(desc.data.all$cohort,
                               levels = 1:3,
                               labels = c('Enrolled Patients',
                                          'Hospital Survivors',
                                          'Long-Term Outcomes'))

## Shorten factor levels
levels(desc.data.all$ever.vent.s) <- levels(desc.data.all$ever.del.s.imp) <-
  levels(desc.data.all$ever.coma.s.imp) <- c('Never', 'Yes')
levels(desc.data.all$died.inhosp) <- c('Survived or w/d in hospital', 'Died in hospital')

## Add/shorten labels
label(desc.data.all$sex.pp) <- 'Sex'
label(desc.data.all$race.pp) <- 'Race'
label(desc.data.all$num.comorbid) <- 'Number of comorbidities'
label(desc.data.all$frailty) <- 'CSHA Frailty, enrollment'
label(desc.data.all$icu.type) <- 'ICU type'
label(desc.data.all$nutric.atrisk.il6) <- 'Nutritionally at risk (NUTRIC >=6)'
label(desc.data.all$nutric.atrisk.noil6) <- 'Nutritionally at risk (mod. NUTRIC >=5)'
label(desc.data.all$mean.benz.icu) <- 'Mean 24h benzos in ICU (midaz)'
label(desc.data.all$mean.op.new.icu) <- 'Mean 24h opioids in ICU (fentanyl)'
label(desc.data.all$mean.prop.icu) <- 'Mean 24h propofol in ICU'
label(desc.data.all$mean.dex.icu) <- 'Mean 24h dex in ICU'
label(desc.data.all$ever.vent.s) <- 'On MV during study period'
label(desc.data.all$ever.del.s.imp) <- 'Delirious during study period'
label(desc.data.all$del.s.imp.eo) <- 'Days delirium among exposed'
label(desc.data.all$ever.coma.s.imp) <- 'Comatose during study period'
label(desc.data.all$coma.s.imp.eo) <- 'Days coma among exposed'
label(desc.data.all$hospdis.loc) <- 'Discharge location'
label(desc.data.all$died.inhosp) <- 'Died in hospital'
label(desc.data.all$died.brain.90) <- '90-day mortality'
label(desc.data.all$died.brain.365) <- '365-day mortality'
label(desc.data.all$rbans.global.3) <- 'RBANS global, 3m'
label(desc.data.all$rbans.global.12) <- 'RBANS global, 12m'
label(desc.data.all$trail.b.3) <- 'Trails B, 3m'
label(desc.data.all$trail.b.12) <- 'Trails B, 12m'
label(desc.data.all$adl.3) <- 'Katz ADL, 3m'
label(desc.data.all$adl.12) <- 'Katz ADL, 12m'
label(desc.data.all$faq.3) <- 'FAQ, 3m'
label(desc.data.all$faq.12) <- 'FAQ, 12m'
label(desc.data.all$sf36.pcs.3) <- 'SF36 PCS, 3m'
label(desc.data.all$sf36.pcs.12) <- 'SF36 PCS, 12m'
label(desc.data.all$sf36.mcs.3) <- 'SF36 MCS, 3m'
label(desc.data.all$sf36.mcs.12) <- 'SF36 MCS, 12m'

## -- Create plot of full vs modified NUTRIC scores ------------------------------------------------
nutric.scatter <- ggplot(data = subset(desc.data.all, !is.na(nutric.il6)),
                         aes(x = nutric.il6, y = nutric.noil6)) +
  facet_wrap(~ cohort, ncol = 3) +
  geom_point(aes(colour = (nutric.il6 == nutric.noil6)),
             position = position_jitter(width = 0.8, height = 0.8), alpha = 0.3, size = 0.6) +
  geom_rug(aes(colour = (nutric.il6 == nutric.noil6)),
           position = position_jitter(width = 0.75), alpha = 0.2) +
  scale_x_continuous(name = 'Full NUTRIC (Including IL-6)', limits = c(-0.5, 10.5), breaks = 0:10) +
  scale_y_continuous(name = 'Modified NUTRIC, Excluding IL-6', limits = c(-0.5, 9.5), breaks = 0:9) +
  scale_colour_manual(name = 'Full NUTRIC = Modified NUTRIC', values = c('#BA6E00', '#003D79')) +
  theme_bw() +
  theme(legend.position = 'bottom', legend.direction = 'horizontal',
        legend.key.size = unit(0.4, 'cm'),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 8),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 7))

@

<<printdescstats, results = 'asis'>>=
latex(summaryM(formula(paste(paste(desc.vars, collapse = ' + '), '~ cohort')),
               data = desc.data.all),
      file = '',
      digits = 2,
      where = '!h',
      caption = 'Baseline and In-Hospital Characteristics for Each Cohort',
      caption.lot = 'Baseline and In-Hospital Characteristics for Each Cohort',
      label = 'table:descinhosp',
      prn = FALSE,
      what = '%',
      npct = 'both',
      exclude1 = FALSE,
      size = 'footnotesize',
      prmsd = TRUE)

@

\clearpage
Figure \ref{fig:nutricplot} compares full and modified NUTRIC scores (ie, with and without IL-6) by
cohort among patients who have both available (ie, have at least one IL-6 measurement before study
day 5). For the vast majority of patients, these two versions of the NUTRIC are equivalent; in our
cohort, including IL-6 doesn't seem to make very much difference.

<<nutricplot, results = 'asis', fig.cap='Full vs Modified NUTRIC Scores by Cohort', fig.width=7.5, fig.height=3.25>>=
nutric.scatter

@

% \clearpage
Figure \ref{fig:km365all} shows a Kaplan-Meier curve representing mortality over the year following
enrollment for all enrolled patients. \textbf{Please interpret these with caution}; because very few
patients had NUTRIC scores of 9 or 10 at admission, drops in these KM curves look more dramatic
than in others.

<<km365setup>>=
## -- Kaplan-Meier curve for 365-day mortality -----------------------------------------------------
## Create Surv objects
allmort.Surv <-
  with(brain.oneobs, Surv(time = days.deathlast.365, event = as.numeric(died.brain.365)))
allmort.bynutric <- survfit(allmort.Surv ~ nutric.il6, data = brain.oneobs)

## Create monochromatic color scheme based on Nate's preferred navy (#003D79, colorhexa.com)
# ## Highest NUTRIC = lightest blue
# nutric.colors <- c('#00172E', '#002447', '#003061', '#003D7A', '#004A94', '#0057AD', '#0063C7', '#0070E1', '#007CFA', '#1589FF', '#2F96FF')
## Highest NUTRIC = darkest blue
nutric.colors <- c('#2F96FF', '#1589FF', '#007CFA', '#0070E1', '#0063C7', '#0057AD', '#004A94',
                   '#003D7A', '#003061', '#002447', '#00172E')

## Create plots
## '#003D79' = Nate's preferred navy
## '#BA6E00' = complementary color to Nate's preferred navy per paletton.com

@

<<km365all, results='asis', fig.cap='Kaplan-Meier Curve, Mortality among All Patients up to 365 Days after Enrollment', fig.height = 4>>=
## All BRAIN patients
ggsurv(allmort.bynutric, cens.col = '#BA6E00', cens.shape = NA) +
  scale_colour_manual(name = 'NUTRIC,\nICU Admission', values = nutric.colors) +
  scale_x_continuous(name = 'Days Since Enrollment', breaks = c(0, 30, 90, 180, 365)) +
  scale_y_continuous('Probability Alive') +
  guides(linetype = FALSE) +
  theme_bw()

@

<<printdescstatslt, results = 'asis'>>=
latex(summaryM(formula(paste(paste(lt.vars, collapse = ' + '), '~ 1')),
               data = subset(desc.data.all, cohort == 'Long-Term Outcomes')),
      file = '',
      digits = 2,
      where = '!h',
      caption = 'Long-Term Outcomes', caption.lot = 'Long-Term Outcomes',
      label = 'table:desclt',
      prn = TRUE,
      what = '%',
      npct = 'both',
      exclude1 = FALSE,
      colheads = c('N', 'Patients with Long-Term Outcomes'),
      prmsd = TRUE)

@

\clearpage
\section{General Methods} \label{sec:covars}
All analyses are done using multivariable regression; specific types of regression are noted for
each outcome. All hypothesis testing is done using the \Sexpr{use.method} method.

To avoid bias as much as possible, models for discharge location and all long-term cognitive,
disability and HRQOL outcomes are done using multiple imputation, although full NUTRIC scores are
not imputed due to the involvement of IL-6. All hospital survivors with NUTRIC scores are included
in discharge location models; all patients with NUTRIC scores and at least partial outcomes data at
that time point are included in long-term outcomes models. We use multiple imputation (specifically,
predictive mean matching) to impute both missing covariates and missing outcomes for all of these
patients (again, with the exception of NUTRIC scores).

Due to the complexity of imputing both baseline and time-varying covariates in time-varying Cox
models, and the low proportion of missingness (\Sexpr{round((sum(!(brain.oneobs$cohort.mort)) / nrow(brain.oneobs))*100)}\% of patients total) and therefore low likelihood of bias, only patients with
at least one day of complete ICU data are included in in-hospital mortality models. Based on 
clinical knowledge, we used LOCF imputation methods for both daily modified SOFA scores and severe
sepsis, using ICU admission values if daily values were unavailable on day 1; mechanical ventilation status was determined based on all intubation/extubation times available in the medical record. Therefore, the only variable which would cause an ICU day to have missing data was mental status:
We imputed this variable using single imputation based on the day before and the day after the missing day, but did not feel that clinically we could impute values further apart than this. Details of missing data are reported for each model in section \ref{section:missingness}.

All models include the following covariates, with changes as noted for mortality outcomes; due to
the potential for immortal time bias, we will use time-varying Cox models which incorporate daily
variables rather than summary variables. In discharge location and long-term outcome models, most continuous covariates (noted below) were allowed to have a nonlinear relationship with the outcomes
using restricted cubic splines; other continuous covariates were forced to have a linear
relationship, due both to limited sample size and to lack of variability in those covariates (eg,
over 75\% of baseline ADL values were 0). In mortality models, due to a lack of events especially
for in-hospital mortality as well as lack of variability in some cases, nearly all continuous covariates were forced to be linear in order to conserve degrees of freedom, with exceptions of daily SOFA, BMI, and NUTRIC scores.

\begin{itemize}
\item Baseline characteristics
  \begin{itemize}
  \item Years of education (nonlinear, except mortality models)
  \item CSHA frailty score
  \item Sex
  \item BMI (nonlinear, all models)
  \item IQCODE
  \item Katz ADL
  \item FAQ (nonlinear, except mortality models)
  \end{itemize}
\item In-hospital characteristics
  \begin{itemize}
  \item Mean modified daily SOFA in ICU (nonlinear, all models) (\emph{mortality: daily modified SOFA})
  \item Duration of severe sepsis (nonlinear) (\emph{mortality: daily severe sepsis})
  \item Duration of delirium (nonlinear) (\emph{mortality: daily mental status})
  \item Duration of coma (nonlinear) (\emph{mortality: daily mental status})
  \item Duration of mechanical ventilation (nonlinear) (\emph{mortality: daily MV})
  \end{itemize}
\end{itemize}

<<modelsetup>>=
## Create numeric version of baseline frailty
brain.oneobs$frailty.num <- as.numeric(gsub('\\..*$', '', brain.oneobs$frailty))

## -- In-hospital mortality ------------------------------------------------------------------------
## Impute sepsis at admission for patients missing day 1 sepsis
sepsis.adm.pts <- subset(brain.oneobs, sepsis.adm == 'Sepsis at admission')$id
brain.daily <- brain.daily %>%
  group_by(id) %>%
  mutate(sevsepsis.base = factor(ifelse(study.day == 1 &
                                          is.na(sevsepsis.l24) & id %in% sepsis.adm.pts, 2,
                                 ifelse(study.day == 1 & is.na(sevsepsis.l24), 1,
                                 ifelse(is.na(sevsepsis.l24), NA,
                                 ifelse(sevsepsis.l24 == 'Not severely septic today', 1, 2)))),
                                 levels = 1:2, labels = c('No sepsis', 'Sepsis')),
         sevsepsis.imp = zoo::na.locf(sevsepsis.base)) %>%
  ungroup()
brain.daily <- as.data.frame(brain.daily)

## -- Discharge location (hospital survivor cohorts) -----------------------------------------------
## List of model covariates for discharge location and long-term outcomes
lt.covars <- c('edu', 'frailty.num', 'sex.pp', 'bmi', 'iqcode.score.e', 'adl.e', 'faq.e',
               'mean.modsofa.icu', 'icudays.sevseptic.s', 'del.s.imp', 'coma.s.imp',
               'vent.los.tot.s')

## Create data sets for discharge location and long-term mortality analyses
modeldata.il6.survivors <- brain.oneobs[brain.oneobs$cohort.survivors.il6,
                                        c(lt.covars, 'nutric.il6', 'dc.home',
                                          'days.deathlast.90', 'died.brain.90',
                                          'days.deathlast.365', 'died.brain.365')]
modeldata.noil6.survivors <- brain.oneobs[brain.oneobs$cohort.survivors,
                                          c(lt.covars, 'nutric.noil6', 'dc.home',
                                            'days.deathlast.90', 'died.brain.90',
                                            'days.deathlast.365', 'died.brain.365')]

## Create mice objects for imputation
mice.il6.survivors <-
  mice(data = modeldata.il6.survivors, m = 10, visitSequence = 'monotone', seed = 56)
mice.noil6.survivors <-
  mice(data = modeldata.noil6.survivors, m = 10, visitSequence = 'monotone', seed = 56)

## -- Long-term cognitive and disability outcomes --------------------------------------------------

## Righthand side of formula without any NUTRIC score - to use in pool.compare()
lt.nonutric.rh <- 'rcs(edu, 3) + frailty.num + sex.pp + rcs(bmi, 3) + iqcode.score.e + adl.e + rcs(faq.e, 3) + rcs(mean.modsofa.icu, 3) + rcs(icudays.sevseptic.s, 3) + rcs(del.s.imp, 3) + rcs(coma.s.imp, 3) + rcs(vent.los.tot.s, 3)'

## Righthand sides of models including NUTRIC
lt.il6.covars <- c(lt.covars, 'nutric.il6')
lt.il6.rh <- paste(lt.nonutric.rh, '+ rcs(nutric.il6, 3)')

lt.noil6.covars <- c(lt.covars, 'nutric.noil6')
lt.noil6.rh <- paste(lt.nonutric.rh, '+ rcs(nutric.noil6, 3)')

## List of variable prefixes for long-term outcomes
lt.outcomes <- c('adl', 'faq', 'rbans.global', 'trail.b', 'sf36.mcs', 'sf36.pcs')

## Create data sets for each model set: two time points, using NUTRIC with/without IL-6
modeldata.il6.3 <- brain.oneobs[brain.oneobs$cohort.3m.il6,
                                c(lt.covars, 'nutric.il6', paste(lt.outcomes, 3, sep = '.'))]

modeldata.il6.12 <- brain.oneobs[brain.oneobs$cohort.12m.il6,
                                 c(lt.covars, 'nutric.il6', paste(lt.outcomes, 12, sep = '.'))]

modeldata.noil6.3 <- brain.oneobs[brain.oneobs$cohort.3m,
                                  c(lt.covars, 'nutric.noil6', paste(lt.outcomes, 3, sep = '.'))]

modeldata.noil6.12 <- brain.oneobs[brain.oneobs$cohort.12m,
                                   c(lt.covars, 'nutric.noil6', paste(lt.outcomes, 12, sep = '.'))]

## Create mice objects for imputation
mice.il6.3 <- mice(data = modeldata.il6.3, m = 10, visitSequence = 'monotone', seed = 56)
mice.il6.12 <- mice(data = modeldata.il6.12, m = 10, visitSequence = 'monotone', seed = 56)
mice.noil6.3 <- mice(data = modeldata.noil6.3, m = 10, visitSequence = 'monotone', seed = 56)
mice.noil6.12 <- mice(data = modeldata.noil6.12, m = 10, visitSequence = 'monotone', seed = 56)

## Percentiles of NUTRIC with and without IL-6 are extremely similar; include footnote in each
## long-term results table to point out that this is not a typo/mistake
nutric.note <- '\\emph{\\footnotesize{*There was so little difference in NUTRIC scores with and without IL-6 that the percentiles of both versions are the same.}}'

## -- Functions for calculating HRs for mortality models -------------------------------------------
## Extract a single HR from summary(cph)
get.nutric.hr <- function(complevel,     ## Value to compare to reference level
                          cphfit,        ## cph() fit
                          xvar,          ## name of variable to get HR for
                          reflevel = 0){ ## Reference level of xvar
  take.cols <- c('Effect', 'Lower 0.95', 'Upper 0.95')
  tmp <-
    eval(parse(text = paste0('summary(cphfit, ', xvar, ' = c(', reflevel, ', ', complevel, '))')))
  tmp2 <- as.data.frame(t(tmp[grep(xvar, rownames(tmp)) + 1, take.cols]))
  names(tmp2) <- c('pointest', 'lcl', 'ucl')
  tmp2$xval <- complevel
  tmp2$xcomp <- paste(complevel, 'vs', reflevel)
  tmp2
}

## Creates data set of all HRs for each NUTRIC score vs a reference level given a cph() fit
calc.nutric.hrs <- function(cphfit, xvar = c('nutric.il6', 'nutric.noil6'), reflevel = 0){
  if(!('cph' %in% class(cphfit))){
    stop('cphfit must be of class cph')
  }

  ## Get unique values of given NUTRIC variable - will calculate HR for each vs   
  unique.nutric <- sort(unique(brain.oneobs[,xvar]))
  
  ## Create data frame with one row per NUTRIC value
  do.call(rbind,
          lapply(unique.nutric,
                 FUN = get.nutric.hr, cphfit = cphfit, xvar = xvar, reflevel = reflevel))
}

## -- Functions for calculating & plotting results of negative binomial models ---------------------
## -- Step 1: Create design matrix for a given set of covariates -----------------------------------
create.nutric.designmat <- function(formula.rh = c(lt.il6.rh, lt.noil6.rh),
                                      ## which model formula's righthand side to use
                                    xvar,                       ## Which variable should vary?
                                    xpctlimits = c(0.05, 0.95), ## Plotting range in %iles
                                    dataset = brain.oneobs,     ## data set to use
                                    cohort.var = NULL){         ## variable to use to restrict data
  
  ## Get data set to use for all adjustment values
  if(!is.null(cohort.var)){
    usedata <- dataset[dataset[,cohort.var],]
  } else{
    usedata <- dataset
  }
  if(!(xvar %in% names(usedata))){ stop('xvar is not a column in dataset') }
  
  ## Get vector of all original model terms
  modterms <- unlist(strsplit(formula.rh, ' + ', fixed = TRUE))
  
  ## Get information about each covariate:
  ##  variable name, whether numeric and nonlinear, number of knots if applicable
  covar.info <- do.call(rbind, lapply(modterms, FUN = function(v){
    is.nl <- length(grep('^rcs\\(', v)) > 0
    vname <- gsub('^rcs\\(', '', gsub(', *[0-9]+\\)', '', v))
    is.num <- is.numeric(usedata[,vname])
    nknots <- NA
    if(is.nl){
      nknots <- as.numeric(gsub('\\)$', '', strsplit(v, ', *')[[1]][2]))
    }
    data.frame('var' = vname, 'num' = is.num, 'nl' = is.nl, 'nk' = nknots)
  }))
  if(!(xvar %in% covar.info$var)){ stop('xvar is not included in formula.rh') }
  
  ## Which variables do we need to set default values for?
  vars.adj.to <- covar.info[grep(xvar, covar.info$var, invert = TRUE),]

  ## For each of these, set adjustment value as follows  
  adjto.cols <- unlist(lapply(1:nrow(vars.adj.to), FUN = function(vrow){
    ## Function returns a named vector for each variable
    use.var <- as.character(vars.adj.to[vrow, 'var'])
    
    ## If variable is categorical, set to 0 (reference level)
    if(!vars.adj.to[vrow, 'num']){
      vvals <- 0
      names(vvals) <- use.var
    } else{
      set.to <- median(usedata[,use.var], na.rm = TRUE)
      ## If numeric and linear, set to median
      if(!vars.adj.to[vrow, 'nl']){
        vvals <- set.to
        names(vvals) <- use.var
      } else{
        ## If numeric and nonlinear, set to median + spline term(s) for median
        vknots <- rcspline.eval(usedata[,use.var], nk = vars.adj.to[vrow, 'nk'], knots.only = TRUE)
        vvals <- as.numeric(rcspline.eval(set.to, knots = vknots, inclx = TRUE))
        names(vvals) <- paste0(use.var,
                               unlist(lapply(1:(length(vknots) - 1), FUN = function(k){
                                 paste(rep("'", k - 1), collapse = '') })))
      }
    }
    vvals
  }))
  
  ## Get values for X variable and any applicable nonlinear terms
  ## Get all unique values of X variable
  x.vals <- sort(unique(usedata[,xvar]))

  ## Trim to %iles we want to plot, if needed
  if(!is.null(xpctlimits)){
    x.lims <- quantile(x.vals, probs = xpctlimits, na.rm = TRUE)
    x.vals.trim <- x.vals[x.vals >= x.lims[1] & x.vals <= x.lims[2]]
  } else{
    x.vals.trim <- x.vals
  }
  
  ## If X variable is nonlinear, get matrix of [knots - 1] columns
  if(covar.info[covar.info$var == xvar, 'nl']){
    x.knots <- rcspline.eval(usedata[,xvar],
                             nk = covar.info[covar.info$var == xvar, 'nk'],
                             knots.only = TRUE)
    all.x.vals <- as.matrix(rcspline.eval(x.vals.trim, knots = x.knots, inclx = TRUE))
    colnames(all.x.vals) <- paste0(xvar,
                                   unlist(lapply(1:(length(x.knots) - 1), FUN = function(k){
                                     paste(rep("'", k - 1), collapse = '') })))
  } else{
    ## If X variable is linear, create 1-column matrix out of trimmed unique values
    all.x.vals <- matrix(x.vals.trim, ncol = 1)
    colnames(all.x.vals) <- xvar
  }
  
  ## How many rows will be in resulting matrix? (number of X values plotted)
  matrows <- length(x.vals.trim)
  
  ## Create matrix with nrow = number of unique X values, columns = values to adjust covariates to
  adjto.matrix <- matrix(rep(adjto.cols, matrows), ncol = length(adjto.cols), byrow = TRUE)
  colnames(adjto.matrix) <- names(adjto.cols)
  
  ## Bind unique X values + nonlinear terms to covariate values
  designmat <- cbind(adjto.matrix, all.x.vals)
  
  ## Add intercept column
  cbind('(Intercept)' = rep(1, matrows), designmat)
}

## Create design matrices using long-term cohort, one with and without NUTRIC + IL6
lt.designmat.il6 <- create.nutric.designmat(formula.rh = lt.il6.rh,
                                            xvar = 'nutric.il6',
                                            xpctlimits = NULL,
                                            cohort.var = 'cohort.lt')
lt.designmat.noil6 <- create.nutric.designmat(formula.rh = lt.noil6.rh,
                                              xvar = 'nutric.noil6',
                                              xpctlimits = NULL,
                                              cohort.var = 'cohort.lt')

## -- Step 2: Function to, for each row in design matrix, calc pred value & SE from NB model -------
calc.nbresults <- function(nbobj,          ## negbin model object (from glm.nb())
                           designmat,      ## matrix of covariate values; ncols = coefs in nbobj,
                                           ##  must be in correct order
                           xvar,           ## character string: name of variable to put on X axis
                           intvar = NULL){ ## character string: name of interacting variable
  
  is.mice <- 'mira' %in% class(nbobj)
  
  ## Model object must be fit using glm.nb()
  if(!('negbin' %in% class(nbobj) | (is.mice & 'negbin' %in% class(nbobj$analyses[[1]])))){
    stop('nbobj must be of class negbin from glm.nb(), or a mice object using glm.nb to fit')
  }
  
  ## Get coefficients and vcov matrix, depending on whether object is imputed via mice or not
  if(is.mice){
    nb.coefs <- pool(nbobj)$qbar
    nb.vcov <- pool(nbobj)$t
  } else{
    nb.coefs <- coef(nbobj)
    nb.vcov <- vcov(nbobj)
  }
  coefnames <- names(nb.coefs)
  
  ## Make sure number of coefficients in the model != number of columns in design matrix
  if(length(coefnames) != ncol(designmat)){
    stop("Number of model coefficients does not equal number of columns in design matrix")
  }
  
  ## Make sure column names of design matrix match coefficients in order
  ## coefnames.tmp = remove "rcs(...)" from coefficient names, allowing design matrix to have either
  ##  "rcs(age, 3)age, rcs(age, 3)age'" OR "age, age'" as column names
  coefnames.tmp <- gsub('^rcs\\(.*\\)', '', coefnames)
  coefnames.equal <- unlist(lapply(1:ncol(designmat), FUN = function(v){
    colnames(designmat)[v] == coefnames.tmp[v] |
      length(grep(paste0('^', colnames(designmat)[v], '[0-9]*$'), coefnames.tmp[v])) > 0
  }))
  if(sum(!coefnames.equal) != 0){
    stop('names of nbobj coefficients do not match column names of designmat')
  }
  
  if(!(xvar %in% coefnames.tmp)){
    stop("X axis variable name not in column names of design matrix")
  }
  
  ## Calculate linear predictors and their SEs
  lp <- apply(designmat, MARGIN = 1, FUN = function(x){ sum(nb.coefs * as.numeric(x)) })
  lp.se <- apply(designmat, MARGIN = 1, FUN = function(x){ sqrt(t(x) %*% nb.vcov %*% x) })
  
  ## Calculate LCL, UCLs for linear predictors
  lp.lcl <- lp - qnorm(0.975)*lp.se
  lp.ucl <- lp + qnorm(0.975)*lp.se
  
  ## Calculate predicted counts, CIs as exp(quantities)
  count.pe <- exp(lp)
  count.lcl <- exp(lp.lcl)
  count.ucl <- exp(lp.ucl)
  
  ## Bind all results into data frame for plotting
  xvalue <- designmat[,xvar]
  if(!is.null(intvar)){
    intvalue <- designmat[,intvar]
    return(as.data.frame(cbind(xvalue, intvalue, lp, lp.se, count.pe, count.lcl, count.ucl)))
  } else{
    return(as.data.frame(cbind(xvalue, lp, lp.se, count.pe, count.lcl, count.ucl)))
  }
}

## -- Step 3: Project-specific function to create data frame of predicted values for 3/12m, --------
## -- NUTRIC with/without IL-6 ---------------------------------------------------------------------
## -- Negative binomial models ---------------------------------------------------------------------
create.nb.preddata <- function(outcome = c('adl', 'faq')){
  mod.il6.3 <- get(paste0(outcome, '.il6.3'))
  mod.noil6.3 <- get(paste0(outcome, '.noil6.3'))
  mod.il6.12 <- get(paste0(outcome, '.il6.12'))
  mod.noil6.12 <- get(paste0(outcome, '.noil6.12'))
  
  pred.il6.3 <-
    calc.nbresults(nbobj = mod.il6.3, designmat = lt.designmat.il6, xvar = 'nutric.il6')
  pred.noil6.3 <-
    calc.nbresults(nbobj = mod.noil6.3, designmat = lt.designmat.noil6, xvar = 'nutric.noil6')
  pred.il6.12 <-
    calc.nbresults(nbobj = mod.il6.12, designmat = lt.designmat.il6, xvar = 'nutric.il6')
  pred.noil6.12 <-
    calc.nbresults(nbobj = mod.noil6.12, designmat = lt.designmat.noil6, xvar = 'nutric.noil6')
  
  pred.il6.3$time <- pred.noil6.3$time <- 1
  pred.il6.12$time <- pred.noil6.12$time <- 2
  
  pred.il6.3$version <- pred.il6.12$version <- 1
  pred.noil6.3$version <- pred.noil6.12$version <- 2
  
  pred.data <- rbind(pred.il6.3, pred.il6.12, pred.noil6.3, pred.noil6.12)
  pred.data$time.f <- factor(pred.data$time, levels = 1:2, labels = c('3 Months', '12 Months'))
  pred.data$version.f <-
    factor(pred.data$version, levels = 1:2, labels = c('With IL-6', 'Without IL-6'))
  
  pred.data
  
}

## -- rms models (d/t datadist, requires Predict() objects to be created outside function) ---------
create.rms.preddata <- function(outcome = c('rbans', 'trailb', 'pcs', 'mcs', 'ltmort', 'dchome')){
  ## 'dchome' only has one time point; treat differently than 3/12-m outcomes
  if(outcome == 'dchome'){
    mod.il6 <- get(paste0(outcome, '.il6'))
    mod.noil6 <- get(paste0(outcome, '.noil6'))

    pred.il6 <- as.data.frame(get(paste0(outcome, '.pred.il6')))
    names(pred.il6)[grep('^nutric', names(pred.il6))] <- 'xvalue'
    pred.noil6 <- as.data.frame(get(paste0(outcome, '.pred.noil6')))
    names(pred.noil6)[grep('^nutric', names(pred.noil6))] <- 'xvalue'

    pred.il6$time <- pred.noil6$time <- 0

    pred.il6$version <- 1
    pred.noil6$version <- 2
    
    pred.list <- list(pred.il6, pred.noil6)
    
  } else{
    mod.il6.3 <- get(paste0(outcome, '.il6.3'))
    mod.noil6.3 <- get(paste0(outcome, '.noil6.3'))
    mod.il6.12 <- get(paste0(outcome, '.il6.12'))
    mod.noil6.12 <- get(paste0(outcome, '.noil6.12'))
    
    pred.il6.3 <- as.data.frame(get(paste0(outcome, '.pred.il6.3')))
    names(pred.il6.3)[grep('^nutric', names(pred.il6.3))] <- 'xvalue'
    pred.noil6.3 <- as.data.frame(get(paste0(outcome, '.pred.noil6.3')))
    names(pred.noil6.3)[grep('^nutric', names(pred.noil6.3))] <- 'xvalue'
    pred.il6.12 <- as.data.frame(get(paste0(outcome, '.pred.il6.12')))
    names(pred.il6.12)[grep('^nutric', names(pred.il6.12))] <- 'xvalue'
    pred.noil6.12 <- as.data.frame(get(paste0(outcome, '.pred.noil6.12')))
    names(pred.noil6.12)[grep('^nutric', names(pred.noil6.12))] <- 'xvalue'
    
    pred.il6.3$time <- pred.noil6.3$time <- 1
    pred.il6.12$time <- pred.noil6.12$time <- 2
    
    pred.il6.3$version <- pred.il6.12$version <- 1
    pred.noil6.3$version <- pred.noil6.12$version <- 2
    
    pred.list <- list(pred.il6.3, pred.il6.12, pred.noil6.3, pred.noil6.12)
    
  }
  
  pred.data <- bind_rows(pred.list)
  pred.data$time.f <- factor(pred.data$time,
                             levels = 0:2,
                             labels = c('Discharge', '3 Months', '12 Months'))
  pred.data$version.f <-
    factor(pred.data$version, levels = 1:2, labels = c('With IL-6', 'Without IL-6'))
  
  pred.data
  
}

## -- Step 4: Create plot of predicted ADL/FAQ scores vs NUTRIC scores -----------------------------
## -- Both versions and both times in a single plot ------------------------------------------------
## Create data frame of Y axis labels
yaxis.labels <-
  data.frame(outcome = c('adl', 'faq', 'rbans', 'trailb', 'pcs', 'mcs', 'ltmort', 'dchome'),
             ylabel = c('Katz ADL Score', 'FAQ Score', 'RBANS Global Score', 'Trails B Score',
                        'SF-36 PCS', 'SF-36 MCS',
                        'Probability of Survival', 'Probability of\nDischarge to Non-Home'))

## Plotting function
create.nutric.plot <-
  function(outcome = c('adl', 'faq', 'rbans', 'trailb', 'pcs', 'mcs', 'ltmort', 'dchome')){
    ## Get data set of predicted values for each time/version combination; set variable names
    if(outcome %in% c('adl', 'faq')){
      preddata <- create.nb.preddata(outcome)
      x.var <- 'xvalue'
      y.var <- 'count.pe'
      ymin.var <- 'count.lcl'
      ymax.var <- 'count.ucl'
    } else{
      preddata <- create.rms.preddata(outcome)
      x.var <- 'xvalue'
      y.var <- 'yhat'
      ymin.var <- 'lower'
      ymax.var <- 'upper'
    }
    
    ## Is there >1 time point in the predicted data?
    mult.timepts <- length(unique(preddata$time.f)) > 1
    
    ## Set Y axis label
    outcome.ylab <- yaxis.labels[match(outcome, yaxis.labels$outcome), 'ylabel']
    
    ## Create plot, faceted by NUTRIC version and followup time, set to Nate's preferred aesthetic
    nutric.plot <- ggplot(data = preddata,
                          aes_string(x = x.var, y = y.var, ymin = ymin.var, ymax = ymax.var)) +
      scale_x_continuous(breaks = seq(0, max(preddata$xvalue), 1),
                         name = 'NUTRIC Score at ICU Admission') +
      scale_y_continuous(name = paste('Adjusted', outcome.ylab)) +
      geom_pointrange(colour = "#003D79") +
      theme_bw()
    
    if(mult.timepts){
      nutric.plot <- nutric.plot + facet_grid(time.f ~ version.f, scales = 'free_x')
    } else{
      nutric.plot <- nutric.plot + facet_wrap(~ version.f, scales = 'free_x')
    }
    
    if(outcome %in% c('dchome', 'ltmort')){
      nutric.plot <- nutric.plot +
        scale_y_continuous(limits = c(0, 1), name = paste('Adjusted', outcome.ylab))
    } else{
      nutric.plot <- nutric.plot + scale_y_continuous(name = paste('Adjusted', outcome.ylab))
    }
    
    nutric.plot
    
  }

## -- Step 5: Calculate IRRs, CIs for specified values of a variable -------------------------------
calc.ratioci.nb <- function(irr.var,          ## which variable to calculate IRR for
                            modobj,           ## model object
                            adjust.to = NULL, ## Adjustment values for main term;
                                              ## default = 75th vs 25th percentile in dataset
                            dataset,          ## data set to use to get adjustment values
                            alpha = 0.05){    ## % CIs
  
  if(!(irr.var %in% names(dataset))){
    stop('irr.var is not in columns of dataset')
  }
  
  ## Get model coefficients, vcov matrix
  modcoefs <- pool(modobj)$qbar
  modvcov <- pool(modobj)$t
  
  ## How many nonlinear terms does var have in the model?
  n.terms <- length(unique(grep(paste0(irr.var, "'*$"), names(modcoefs), value = TRUE)))
  
  ## Determine what values to adjust var terms to (by default, 75th and 25th percentiles of dataset)
  if(is.null(adjust.to)){
    ## Get percentiles for main term
    adjust.to <- as.numeric(quantile(dataset[,irr.var], probs = c(0.25, 0.75), na.rm = TRUE))
  } else if(length(!is.na(as.numeric(marker.adjust))) != 2){
    stop('adjust.to must have exactly two non-missing numeric values')
  }
  
  ## If variable is linear, adjust.to = 2x1 matrix
  if(n.terms == 1){
    adjust.matrix <- matrix(adjust.to, ncol = 1)
  ## Otherwise, adjust.to = 2xn.terms matrix
  } else{
    use.knots <- rcspline.eval(dataset[,irr.var], nk = n.terms + 1, knots.only = TRUE)
    adjust.matrix <- as.matrix(rcspline.eval(adjust.to, knots = use.knots, inclx = TRUE))
  }

  ## Calculate differences in adjustment values - this is what will be multiplied by coefficients  
  adjust.diffs <- adjust.matrix[2,] - adjust.matrix[1,]
  names(adjust.diffs) <- paste0(irr.var,
                                unlist(lapply(1:n.terms, FUN = function(k){
                                  paste(rep("'", k - 1), collapse = '') })))

  ## Which coefficients do we need to use?
  use.coefs <- grep(paste0(irr.var, "'*$"), names(modcoefs))
  use.betas <- modcoefs[use.coefs]
  
  ## Get vcov matrix for involved components
  use.vcov <- modvcov[use.coefs, use.coefs]
  
  ## Calculate each component of linear predictor: beta * xvals
  beta.x <- unlist(lapply(1:length(use.betas), FUN = function(b){
    prod(c(use.betas[b], adjust.diffs[b]))
  }))
  
  irrvar.logor <- sum(beta.x)
  irrvar.or <- exp(irrvar.logor)
  
  ## Calculate SE
  irrvar.se <- sqrt(adjust.diffs %*% use.vcov %*% adjust.diffs)
  
  critval <- 1 - alpha / 2
  
  irrvar.lcl <- exp(irrvar.logor - qnorm(critval)*irrvar.se)
  irrvar.ucl <- exp(irrvar.logor + qnorm(critval)*irrvar.se)
  
  return(c('pointest' = irrvar.or, 'lcl' = irrvar.lcl, 'ucl' = irrvar.ucl,
           'ref.val' = adjust.to[1], 'comp.val' = adjust.to[2]))
}

## -- Step 6: Functions to create data set of results for an outcome, both times & NUTRIC vsns -----
## -- Negative binomial models using mice ----------------------------------------------------------
nb.results.data <- function(outcome = c('adl', 'faq')){
  mod.nonutric.il6.3 <- get(paste0(outcome, '.nonutric.il6.3'))
  mod.il6.3 <- get(paste0(outcome, '.il6.3'))
  mod.nonutric.noil6.3 <- get(paste0(outcome, '.nonutric.noil6.3'))
  mod.noil6.3 <- get(paste0(outcome, '.noil6.3'))
  mod.nonutric.il6.12 <- get(paste0(outcome, '.nonutric.il6.12'))
  mod.il6.12 <- get(paste0(outcome, '.il6.12'))
  mod.nonutric.noil6.12 <- get(paste0(outcome, '.nonutric.noil6.12'))
  mod.noil6.12 <- get(paste0(outcome, '.noil6.12'))
  
  use.data <- subset(brain.oneobs, cohort.lt)
  
  irrci.il6.3 <- calc.ratioci.nb(irr.var = 'nutric.il6', modobj = mod.il6.3, dataset = use.data)
  irrci.noil6.3 <-
    calc.ratioci.nb(irr.var = 'nutric.noil6', modobj = mod.noil6.3, dataset = use.data)
  irrci.il6.12 <- calc.ratioci.nb(irr.var = 'nutric.il6', modobj = mod.il6.12, dataset = use.data)
  irrci.noil6.12 <-
    calc.ratioci.nb(irr.var = 'nutric.noil6', modobj = mod.noil6.12, dataset = use.data)

  p.il6.3 <-
    pool.compare(mod.il6.3, mod.nonutric.il6.3, data = mice.il6.3, method = use.method)$pvalue
  p.noil6.3 <-
    pool.compare(mod.noil6.3, mod.nonutric.noil6.3, data = mice.noil6.3, method = use.method)$pvalue
  p.il6.12 <-
    pool.compare(mod.il6.12, mod.nonutric.il6.12, data = mice.il6.12, method = use.method)$pvalue
  p.noil6.12 <-
    pool.compare(mod.noil6.12, mod.nonutric.noil6.12,
                 data = mice.noil6.12, method = use.method)$pvalue
  
  irrp.data <- as.data.frame(rbind(c(irrci.il6.3, p.il6.3), c(irrci.noil6.3, p.noil6.3),
                                   c(irrci.il6.12, p.il6.12), c(irrci.noil6.12, p.noil6.12)))
  names(irrp.data)[ncol(irrp.data)] <- 'pval'
  
  irrp.data$time.f <- factor(c(1, 1, 2, 2), levels = 1:2, labels = c('3 Months', '12 Months'))
  irrp.data$version.f <-
    factor(c(1, 2, 1, 2), levels = 1:2, labels = c('With IL-6', 'Without IL-6'))
  
  irrp.data$comp.str <- with(irrp.data, paste(comp.val, 'vs.', ref.val))
  irrp.data$peci.str <- with(irrp.data, paste0(rndformat(pointest), ' (',
                                               rndformat(lcl), ', ',
                                               rndformat(ucl), ')'))
  irrp.data$pval.str <- formatp(irrp.data$pval)
  
  irrp.data
  
}

## -- rms models, exponentiating point estimates for mort, disloc outcomes -------------------------
rms.results.data <- function(outcome = c('rbans', 'trailb', 'pcs', 'mcs', 'mort', 'dchome')){
  if(outcome == 'mort'){
    mod.inhosp.il6 <- get(paste0(outcome, '.inhosp.il6'))
    mod.inhosp.noil6 <- get(paste0(outcome, '.inhosp.noil6'))
    sum.inhosp.il6 <- get(paste0(outcome, '.inhosp.sum.il6'))
    sum.inhosp.noil6 <- get(paste0(outcome, '.inhosp.sum.noil6'))
    
    mod.90.il6 <- get(paste0(outcome, '.90.il6'))
    mod.90.noil6 <- get(paste0(outcome, '.90.noil6'))
    sum.90.il6 <- get(paste0(outcome, '.90.sum.il6'))
    sum.90.noil6 <- get(paste0(outcome, '.90.sum.noil6'))
    
    mod.365.il6 <- get(paste0(outcome, '.365.il6'))
    mod.365.noil6 <- get(paste0(outcome, '.365.noil6'))
    sum.365.il6 <- get(paste0(outcome, '.365.sum.il6'))
    sum.365.noil6 <- get(paste0(outcome, '.365.sum.noil6'))
    
    diffci.inhosp.il6 <- sum.inhosp.il6[grep('^nutric', rownames(sum.inhosp.il6)),]
    diffci.inhosp.noil6 <- sum.inhosp.noil6[grep('^nutric', rownames(sum.inhosp.noil6)),]
    diffci.90.il6 <- sum.90.il6[grep('^nutric', rownames(sum.90.il6)),]
    diffci.90.noil6 <- sum.90.noil6[grep('^nutric', rownames(sum.90.noil6)),]
    diffci.365.il6 <- sum.365.il6[grep('^nutric', rownames(sum.365.il6)),]
    diffci.365.noil6 <- sum.365.noil6[grep('^nutric', rownames(sum.365.noil6)),]

    diffci.list <- list(diffci.inhosp.il6, diffci.inhosp.noil6,
                        diffci.90.il6, diffci.90.noil6,
                        diffci.365.il6, diffci.365.noil6)
    mod.list <- list(mod.inhosp.il6, mod.inhosp.noil6,
                     mod.90.il6, mod.90.noil6,
                     mod.365.il6, mod.365.noil6)
    
  } else if(outcome %in% c('dchome')){
    mod.il6 <- get(paste0(outcome, '.il6'))
    mod.noil6 <- get(paste0(outcome, '.noil6'))
    
    sum.il6 <- get(paste0(outcome, '.sum.il6'))
    sum.noil6 <- get(paste0(outcome, '.sum.noil6'))

    diffci.il6 <- sum.il6[grep('^nutric', rownames(sum.il6)),]
    diffci.noil6 <- sum.noil6[grep('^nutric', rownames(sum.noil6)),]
    
    diffci.list <- list(diffci.il6, diffci.noil6)
    mod.list <- list(mod.il6, mod.noil6)
    
  } else{
    mod.il6.3 <- get(paste0(outcome, '.il6.3'))
    mod.noil6.3 <- get(paste0(outcome, '.noil6.3'))
    mod.il6.12 <- get(paste0(outcome, '.il6.12'))
    mod.noil6.12 <- get(paste0(outcome, '.noil6.12'))
    
    sum.il6.3 <- get(paste0(outcome, '.sum.il6.3'))
    sum.noil6.3 <- get(paste0(outcome, '.sum.noil6.3'))
    sum.il6.12 <- get(paste0(outcome, '.sum.il6.12'))
    sum.noil6.12 <- get(paste0(outcome, '.sum.noil6.12'))
    
    diffci.il6.3 <- sum.il6.3[grep('^nutric', rownames(sum.il6.3)),]
    diffci.noil6.3 <- sum.noil6.3[grep('^nutric', rownames(sum.noil6.3)),]
    diffci.il6.12 <- sum.il6.12[grep('^nutric', rownames(sum.il6.12)),]
    diffci.noil6.12 <- sum.noil6.12[grep('^nutric', rownames(sum.noil6.12)),]
    
    diffci.list <- list(diffci.il6.3, diffci.noil6.3, diffci.il6.12, diffci.noil6.12)
    mod.list <- list(mod.il6.3, mod.noil6.3, mod.il6.12, mod.noil6.12)
    
  }
  
  if(outcome %in% c('mort', 'dchome')){
    exp.cols <- c(4, 6, 7)
    diffci.list <- lapply(diffci.list, FUN = function(x){
      x[exp.cols] <- exp(x[exp.cols])
      x
    })
  }
  
  p.list <- lapply(mod.list, FUN = function(m){
    anova(m)[grep('^nutric', rownames(anova(m))), 'P'] })
  
  diffcip.data <- as.data.frame(do.call(rbind, lapply(1:length(p.list), FUN = function(i){
    c(diffci.list[[i]], p.list[[i]])
  })))
  
  names(diffcip.data) <- c('ref.val', 'comp.val', 'diff', 'pointest', 'se', 'lcl', 'ucl',
                           'type', 'pval')

  if(outcome == 'dchome'){
    diffcip.data$time.f <- factor(rep(1, 2), levels = 1, labels = 'Discharge')
    diffcip.data$version.f <- factor(c(1, 2), levels = 1:2, labels = c('With IL-6', 'Without IL-6'))
  } else if(outcome == 'mort'){
    diffcip.data$time.f <- factor(c(1, 1, 2, 2, 3, 3),
                                  levels = 1:3,
                                  labels = c('In-Hospital', '90 Days', '365 Days'))
    diffcip.data$version.f <- factor(c(1, 2, 1, 2, 1, 2),
                                     levels = 1:2,
                                     labels = c('With IL-6', 'Without IL-6'))
  } else{
    diffcip.data$time.f <- factor(c(2, 2, 3, 3), levels = 2:3, labels = c('3 Months', '12 Months'))
    diffcip.data$version.f <-
      factor(c(1, 2, 1, 2), levels = 1:2, labels = c('With IL-6', 'Without IL-6'))
  }
  
  diffcip.data$comp.str <- with(diffcip.data, paste(comp.val, 'vs.', ref.val))
  diffcip.data$peci.str <- with(diffcip.data, paste0(rndformat(pointest), ' (',
                                                     rndformat(lcl), ', ',
                                                     rndformat(ucl), ')'))
  diffcip.data$pval.str <- formatp(diffcip.data$pval)
  
  diffcip.data

}

## -- Step 7: Create data set of results from [model type].results.data() formatted for table ------
results.table <-
  function(outcome = c('adl', 'faq', 'rbans', 'trailb', 'pcs', 'mcs', 'mort', 'dchome')){
    if(outcome %in% c('adl', 'faq')){
      results.data <- nb.results.data(outcome)
    } else{
      results.data <- rms.results.data(outcome)
    }
    
    results.data <- results.data %>%
      dplyr::select(time.f, version.f, comp.str, peci.str, pval.str) %>%
      gather(key = quant, value = quantity, comp.str:pval.str) %>%
      mutate(quant = ifelse(version.f == 'With IL-6',
                            paste0(quant, '.il6'),
                            paste0(quant, '.noil6'))) %>%
      dplyr::select(-version.f) %>%
      spread(key = quant, value = quantity)
    results.data[,c('time.f',
                    'comp.str.il6', 'peci.str.il6', 'pval.str.il6',
                    'comp.str.noil6', 'peci.str.noil6', 'pval.str.noil6')]
  }

## -- Create table of missingness for each outcome -------------------------------------------------
## Function to calculate N, % missing for a given mice object
descmiss.mice <- function(miceobj, cohortn){
  nmiss <- miceobj$nmis
  pctmiss <- round((nmiss / cohortn)*100)
  npctmiss <- paste0(pctmiss, '\\% (', nmiss, ')')
  varnames <- gsub('\\.[0-9]+$', '', names(miceobj$nmis))
  data.frame(varname = varnames, npct = npctmiss, stringsAsFactors = FALSE)
}

## Create table for outcomes using hospital survivors
survivors.mice <- c('mice.il6.survivors', 'mice.noil6.survivors')
survivors.ns <- c(n.survivors.il6, n.survivors)

missing.survivors.info <- lapply(1:length(survivors.mice),
                                 FUN = function(m){ descmiss.mice(get(survivors.mice[m]),
                                                                  survivors.ns[m]) })
missing.survivors.df <- cbind(missing.survivors.info[[1]]['varname'],
                              do.call(cbind, lapply(missing.survivors.info,
                                                    FUN = function(m){ m[,'npct'] })))
missing.survivors.df <-
  subset(missing.survivors.df, !(varname %in% c('days.deathlast', 'died.brain')))

## Add total Ns to the top
survivors.ns.df <- as.data.frame(t(c('Overall N', survivors.ns)))
names(survivors.ns.df) <- names(missing.survivors.df)
missing.survivors.df <- rbind(survivors.ns.df, missing.survivors.df)

rownames(missing.survivors.df) <- missing.survivors.df$varname

## Create table for all long-term outcomes (same amount of missingness in each)
lt.mice <- c('mice.il6.3', 'mice.noil6.3', 'mice.il6.12', 'mice.noil6.12')
lt.ns <- c(n.3m.il6, n.3m, n.12m.il6, n.12m)

missing.lt.info <- lapply(1:length(lt.mice),
                          FUN = function(m){ descmiss.mice(get(lt.mice[m]), lt.ns[m]) })
missing.lt.df <- cbind(missing.lt.info[[1]]['varname'],
                       do.call(cbind, lapply(missing.lt.info, FUN = function(m){ m[,'npct'] })))

## Add total Ns to the top
lt.ns.df <- as.data.frame(t(c('Overall N', lt.ns)))
names(lt.ns.df) <- names(missing.lt.df)
missing.lt.df <- rbind(lt.ns.df, missing.lt.df)

rownames(missing.lt.df) <- missing.lt.df$varname

## -- datadist() setup for all cohorts -------------------------------------------------------------
## n.unique set to 11 so that all NUTRIC scores are predicted as integers (no trying to use 7.82...)
ddvars <- c(lt.covars, 'nutric.il6', 'nutric.noil6',
            paste0('rbans.global.', c(3, 12)), paste0('trail.b.', c(3, 12)), 'dc.home')
dd.il6.survivors <- datadist(subset(brain.oneobs, cohort.survivors.il6)[,ddvars], n.unique = 11)
dd.noil6.survivors <- datadist(subset(brain.oneobs, cohort.survivors)[,ddvars], n.unique = 11)
dd.il6.3 <- datadist(subset(brain.oneobs, cohort.3m.il6)[,ddvars], n.unique = 11)
dd.noil6.3 <- datadist(subset(brain.oneobs, cohort.3m)[,ddvars], n.unique = 11)
dd.il6.12 <- datadist(subset(brain.oneobs, cohort.12m.il6)[,ddvars], n.unique = 11)
dd.noil6.12 <- datadist(subset(brain.oneobs, cohort.12m)[,ddvars], n.unique = 11)

## Which NUTRIC value should be used as reference for HR plots?
## Use floor() to make sure it's an integer
nutric.ref <- floor(median(subset(brain.oneobs, cohort.mort.il6)$nutric.il6, na.rm = TRUE))

## Which NUTRIC values should be used for estimates in summary.rms()? For some reason datadist is
## being weird.
get.nutric.pcts <- function(cvar, nvar){
  quantile(brain.oneobs[brain.oneobs[,cvar], nvar], probs = c(0.25, 0.75), na.rm = TRUE)
}

nutric.il6.pct.mort <- get.nutric.pcts('cohort.mort.il6', 'nutric.il6')
nutric.noil6.pct.mort <- get.nutric.pcts('cohort.mort', 'nutric.noil6')
nutric.il6.pct.survivors <- get.nutric.pcts('cohort.survivors.il6', 'nutric.il6')
nutric.noil6.pct.survivors <- get.nutric.pcts('cohort.survivors', 'nutric.noil6')
nutric.il6.pct.lt <- get.nutric.pcts('cohort.lt.il6', 'nutric.il6')
nutric.noil6.pct.lt <- get.nutric.pcts('cohort.lt', 'nutric.noil6')

@

\clearpage
\subsection{Missingness for Each Cohort} \label{section:missingness}
Table \ref{table:mortmissing} presents details on patients excluded from the complete case analyses used for all mortality models.

<<missingmort>>=
missing.mort.ns <-
  matrix(c(n.allpts,
           nrow(subset(brain.oneobs, cohort.allpts & no.days.mental)),
           nrow(subset(brain.oneobs, cohort.allpts & miss.base.covar)),
           unlist(lapply(baseline.covar, FUN = function(v){
             sum(is.na(subset(brain.oneobs, cohort.allpts & !no.days.mental)[,v]))
           })),
           sum(brain.oneobs$cohort.mort),
           nrow(subset(brain.oneobs,
                       cohort.allpts & !miss.base.covar & !no.days.mental & is.na(nutric.il6))),
           nrow(subset(brain.oneobs,
                       cohort.allpts & !miss.base.covar & !no.days.mental & !is.na(nutric.il6))),
           nrow(subset(brain.oneobs,
                       cohort.allpts & !miss.base.covar & !no.days.mental & is.na(nutric.noil6))),
           nrow(subset(brain.oneobs,
                       cohort.allpts & !miss.base.covar & !no.days.mental & !is.na(nutric.noil6)))),
         ncol = 1)
rownames(missing.mort.ns) <- c('Enrolled in BRAIN',
                               'No days with complete ICU data',
                               'Missing baseline covariates',
                               paste0('~~~', baseline.covar),
                               'Eligible for inclusion based on covariates',
                               'Missing NUTRIC with IL-6',
                               'Included in models with full NUTRIC',
                               'Missing NUTRIC without IL-6',
                               'Included in models with modified NUTRIC')

@

<<printmortmissing, results = 'asis'>>=
latex(missing.mort.ns, file = '',
      title = '',
      where = '!h',
      caption = 'Missing Data for Mortality Models',
      caption.lot = 'Missing Data for Mortality Models',
      label = 'table:mortmissing',
      rgroup = c('', 'Covariates', 'Main Exposure'),
      n.rgroup = c(1, 10, 4),
      colheads = 'N')

@

Tables \ref{table:survmissing} and \ref{table:ltmissing} show missing covariates and outcomes for,
respectively, hospital survivors (used for discharge location models) and
long-term cognitive, disability and HRQOL cohorts; for these models, this missing data will be
imputed.

<<printltmissing, results = 'asis'>>=
latex(missing.survivors.df[,2:3], file = '',
      title = '',
      where = '!h',
      caption = 'Missing Data for Discharge Location Models',
      caption.lot = 'Missing Data for Discharge Models',
      label = 'table:survmissing',
      rgroup = c('', 'Covariates', 'Outcomes'),
      n.rgroup = c(1, 13, 1),
      colheads = c('With IL-6', 'Without IL-6'),
      col.just = rep('c', 2))

latex(missing.lt.df[,2:5], file = '',
      title = '',
      where = '!h',
      caption = 'Missing Data for Long-Term Outcome Models',
      caption.lot = 'Missing Data for Long-Term Outcome Models',
      label = 'table:ltmissing',
      rgroup = c('', 'Covariates', 'Outcomes'),
      n.rgroup = c(1, 13, 6),
      colheads = rep(c('With IL-6', 'Without IL-6'), 2),
      col.just = rep('c', 4),
      cgroup = c('3 Months', '12 Months'),
      n.cgroup = c(2, 2))

@

\clearpage
\section{NUTRIC vs Mortality}
For all mortality models, we used Cox proportional hazards models with time-dependent covariates,
using complete case data only. Please see Section \ref{section:missingness} for details on patients
included and excluded from these models.

<<mortmodelsetup>>=
## Set model formulas for use in all models
mort.covar.rh <- 'edu + frailty.num + sex.pp + rcs(bmi, 3) + iqcode.score.e + adl.e + faq.e + rcs(daily.sofa.mod.locf, 3) + sevsepsis.imp + mental.stat.imp + on.vent.l24'

mort.il6.rh <- paste(mort.covar.rh, '+ rcs(nutric.il6, 3)')
mort.noil6.rh <- paste(mort.covar.rh, '+ rcs(nutric.noil6, 3)')

## -- Create time-varying data sets ----------------------------------------------------------------
## Variables to include in time-varying data set, and merge on from baseline data
mort.vars.tv <- c('daily.sofa.mod.locf', 'sevsepsis.imp', 'mental.stat.imp', 'on.vent.l24')
mort.vars.base <- c('edu', 'frailty.num', 'sex.pp', 'bmi', 'iqcode.score.e', 'adl.e', 'faq.e')

## Original data set to base time-varying data sets on: all daily records
## (Data sets should only differ in stop.day values)
mort.orgdata <- brain.daily[,c('id', 'study.day', mort.vars.tv)] %>%
  left_join(dplyr::select(brain.oneobs, id, cohort.mort), by = 'id') %>%
  filter(cohort.mort)

## In-hospital mortality ##
## Main time-varying data
mort.inhosp.data <- timevarying.data(org.data = mort.orgdata,
                                     time.var = 'days.deathlast.inhosp.s',
                                     event.var = 'died.inhosp.s',
                                     event.string = 'Died in hospital during study period',
                                     data.set = brain.oneobs)

## Merge on baseline covariates, separately for models with full vs modified NUTRIC
mort.inhosp.noil6.data <- left_join(mort.inhosp.data,
                                    brain.oneobs[,c('id', mort.vars.base, 'nutric.noil6')],
                                    by = 'id') %>%
  filter(complete.cases(.))

mort.inhosp.il6.data <- left_join(mort.inhosp.data,
                                  brain.oneobs[,c('id', mort.vars.base, 'nutric.il6')],
                                  by = 'id') %>%
  filter(complete.cases(.))

## 90-day mortality ##
## Main time-varying data
mort.90.data <- timevarying.data(org.data = mort.orgdata,
                                 time.var = 'days.deathlast.90',
                                 event.var = 'died.brain.90',
                                 event.string = 'Died during first 90 days',
                                 data.set = brain.oneobs)

## Merge on baseline covariates, separately for models with full vs modified NUTRIC
mort.90.noil6.data <- left_join(mort.90.data,
                                brain.oneobs[,c('id', mort.vars.base, 'nutric.noil6')],
                                by = 'id') %>%
  filter(complete.cases(.))

mort.90.il6.data <- left_join(mort.90.data,
                              brain.oneobs[,c('id', mort.vars.base, 'nutric.il6')],
                              by = 'id') %>%
  filter(complete.cases(.))

## 365-day mortality ##
## Main time-varying data
mort.365.data <- timevarying.data(org.data = mort.orgdata,
                                  time.var = 'days.deathlast.365',
                                  event.var = 'died.brain.365',
                                  event.string = 'Died during first 365 days',
                                  data.set = brain.oneobs)

## Merge on baseline covariates, separately for models with full vs modified NUTRIC
mort.365.noil6.data <- left_join(mort.365.data,
                                 brain.oneobs[,c('id', mort.vars.base, 'nutric.noil6')],
                                 by = 'id') %>%
  filter(complete.cases(.))

mort.365.il6.data <- left_join(mort.365.data,
                               brain.oneobs[,c('id', mort.vars.base, 'nutric.il6')],
                               by = 'id') %>%
  filter(complete.cases(.))

## Need to set datadist for summary.rms() to work, but will use NUTRIC values from main cohort;
## multiple records per patient would mess up percentile calculations otherwise
dd.mort.il6 <- datadist(mort.inhosp.il6.data)
dd.mort.noil6 <- datadist(mort.inhosp.noil6.data)

@

<<runmortmodels>>=
## -- Create Surv objects --------------------------------------------------------------------------
Surv.il6.inhosp <- with(mort.inhosp.il6.data, {
  Surv(time = start.day, time2 = stop.day, event = (died == 'Died at end of interval')) })
Surv.noil6.inhosp <- with(mort.inhosp.noil6.data, {
  Surv(time = start.day, time2 = stop.day, event = (died == 'Died at end of interval')) })

Surv.il6.90 <- with(mort.90.il6.data, {
  Surv(time = start.day, time2 = stop.day, event = (died == 'Died at end of interval')) })
Surv.noil6.90 <- with(mort.90.noil6.data, {
  Surv(time = start.day, time2 = stop.day, event = (died == 'Died at end of interval')) })

Surv.il6.365 <- with(mort.365.il6.data, {
  Surv(time = start.day, time2 = stop.day, event = (died == 'Died at end of interval')) })
Surv.noil6.365 <- with(mort.365.noil6.data, {
  Surv(time = start.day, time2 = stop.day, event = (died == 'Died at end of interval')) })

## -- Run models -----------------------------------------------------------------------------------
mort.inhosp.il6 <- cph(as.formula(paste('Surv.il6.inhosp', mort.il6.rh, sep = ' ~ ')),
                       x = TRUE, y = TRUE, data = mort.inhosp.il6.data)

mort.inhosp.noil6 <- cph(as.formula(paste('Surv.noil6.inhosp', mort.noil6.rh, sep = ' ~ ')),
                         x = TRUE, y = TRUE, data = mort.inhosp.noil6.data)

mort.90.il6 <- cph(as.formula(paste('Surv.il6.90', mort.il6.rh, sep = ' ~ ')),
                   x = TRUE, y = TRUE, data = mort.90.il6.data)

mort.90.noil6 <- cph(as.formula(paste('Surv.noil6.90', mort.noil6.rh, sep = ' ~ ')),
                     x = TRUE, y = TRUE, data = mort.90.noil6.data)

mort.365.il6 <- cph(as.formula(paste('Surv.il6.365', mort.il6.rh, sep = ' ~ ')),
                    x = TRUE, y = TRUE, data = mort.365.il6.data)

mort.365.noil6 <- cph(as.formula(paste('Surv.noil6.365', mort.noil6.rh, sep = ' ~ ')),
                      x = TRUE, y = TRUE, data = mort.365.noil6.data)

@

<<mortresults>>=
## -- Create data frame of all HRs for mortality models --------------------------------------------
options(datadist = 'dd.mort.il6')
mort.inhosp.hr.il6 <- calc.nutric.hrs(cphfit = mort.inhosp.il6, 'nutric.il6', nutric.ref)
mort.90.hr.il6 <- calc.nutric.hrs(cphfit = mort.90.il6, 'nutric.il6', nutric.ref)
mort.365.hr.il6 <- calc.nutric.hrs(cphfit = mort.365.il6, 'nutric.il6', nutric.ref)

mort.inhosp.sum.il6 <- summary(mort.inhosp.il6, nutric.il6 = nutric.il6.pct.mort)
mort.90.sum.il6 <- summary(mort.90.il6, nutric.il6 = nutric.il6.pct.mort)
mort.365.sum.il6 <- summary(mort.365.il6, nutric.il6 = nutric.il6.pct.mort)

options(datadist = 'dd.mort.noil6')
mort.inhosp.hr.noil6 <- calc.nutric.hrs(cphfit = mort.inhosp.noil6, 'nutric.noil6', nutric.ref)
mort.90.hr.noil6 <- calc.nutric.hrs(cphfit = mort.90.noil6, 'nutric.noil6', nutric.ref)
mort.365.hr.noil6 <- calc.nutric.hrs(cphfit = mort.365.noil6, 'nutric.noil6', nutric.ref)

mort.inhosp.sum.noil6 <- summary(mort.inhosp.noil6, nutric.noil6 = nutric.noil6.pct.mort)
mort.90.sum.noil6 <- summary(mort.90.noil6, nutric.noil6 = nutric.noil6.pct.mort)
mort.365.sum.noil6 <- summary(mort.365.noil6, nutric.noil6 = nutric.noil6.pct.mort)

## Add time, version variables to all individual data frames of HRs
mort.inhosp.hr.il6$time <- mort.inhosp.hr.noil6$time <- 1
mort.90.hr.il6$time <- mort.90.hr.noil6$time <- 2
mort.365.hr.il6$time <- mort.365.hr.noil6$time <- 3
mort.inhosp.hr.il6$version <- mort.90.hr.il6$version <- mort.365.hr.il6$version <- 1
mort.inhosp.hr.noil6$version <- mort.90.hr.noil6$version <- mort.365.hr.noil6$version <- 2

mort.hrs <- rbind(mort.inhosp.hr.il6, mort.inhosp.hr.noil6,
                  mort.90.hr.il6, mort.90.hr.noil6,
                  mort.365.hr.il6, mort.365.hr.noil6)
mort.hrs$time.f <- with(mort.hrs, factor(time,
                                         levels = 1:3,
                                         labels = c('In-Hospital', '90 Days', '365 Days')))
mort.hrs$version.f <- with(mort.hrs, factor(version,
                                            levels = 1:2,
                                            labels = c('With IL-6', 'Without IL-6')))

## -- Plot HRs for all time points, both NUTRIC versions -------------------------------------------
mort.nutric.plot <- ggplot(data = mort.hrs, aes(x = xval, y = pointest)) +
  geom_hline(yintercept = 1, colour = 'grey90', size = 2) +
  facet_grid(time.f ~ version.f, scales = 'free_x') +
  geom_pointrange(aes(ymin = lcl, ymax = ucl), colour = '#003D79') +
  scale_x_continuous(name = 'NUTRIC Score at ICU Admission', breaks = 0:10) +
  scale_y_continuous(name = paste('Adjusted Hazard Ratio for Death\nReference =', nutric.ref),
                     breaks = c(0, 0.5, 1, 2, 4, 8),
                     trans = 'log') +
  theme_bw()

## -- Create results table -------------------------------------------------------------------------
mort.nutric.table <- results.table('mort')

@

\subsection{NUTRIC vs Mortality}
Results follow for the associations between NUTRIC scores and mortality at the following censoring times: in-hospital death during the 30-day BRAIN study period (death dates from hospital record);
90-day death; and 365-day death (death dates from either staff contact or SSDI).

For all three endpoints, we see an association such that the higher NUTRIC scores are more strongly
related to a higher risk of death. These associations are marginally significant for the full NUTRIC
scores, and less pronounced for modified NUTRIC scores. This could be due to either the influence of
IL-6 (the difference between these two scores), or to the difference between the patients included in the two cohorts. Figure \ref{fig:printmortexplore} presents some exploratory analyses which attempted to describe the latter; no extremely clear difference jumps out, other than the lack of modified NUTRIC scores of 0 in the \Sexpr{nrow(subset(brain.oneobs, cohort.allpts & !miss.base.covar & !no.days.mental & is.na(nutric.il6)))} patients excluded from analyses using the full NUTRIC. But since only \Sexpr{sum(brain.oneobs$nutric.noil6 == 0, na.rm = TRUE)} patients had a modified NUTRIC score of 0, this could just be due to chance.

Table \ref{table:mortresults} shows p-values for the total association of NUTRIC score with
mortality and hazard ratios comparing the 75th to the 25th percentiles of our population's NUTRIC scores. Figure \ref{fig:printmortmodels} shows hazard ratios comparing each NUTRIC value to \Sexpr{nutric.ref}, our complete case cohort's median and thus representing an ``average"
patient.
  
<<printmortmodels, results = 'asis', fig.cap = 'NUTRIC Score at ICU Admission vs Mortality'>>=
latex(mort.nutric.table,
      file = '',
      where = '!h',
      caption = 'NUTRIC Score at ICU Admission vs Mortality',
      caption.lot = 'NUTRIC vs Mortality',
      label = 'table:mortresults',
      size = 'small',
      rowname = NULL,
      colheads = c('Endpoint', rep(c('NUTRIC Comparison', 'HR (95\\% CI)', 'P-Value'), 2)),
      col.just = c('l', rep(c('c', rep('r', 2)), 2)),
      cgroup = c('', 'NUTRIC with IL-6', 'NUTRIC without IL-6'),
      n.cgroup = c(1, 3, 3))

mort.nutric.plot

@

<<printmortexplore, results = 'asis', fig.cap = 'Exploratory Analyses: Patients Included vs Excluded from Mortality Models Using Full NUTRIC Scores'>>=
explore.mort.data <- brain.oneobs %>%
  filter(cohort.mort) %>%
  dplyr::select(id, cohort.mort.il6, nutric.noil6,
                died.inhosp.s, days.deathlast.inhosp.s, died.brain.90, days.deathlast.90,
                died.brain.365, days.deathlast.365) %>%
  gather(key = deathvar, value = deathvalue, died.inhosp.s:days.deathlast.365) %>%
  mutate(deathvar = gsub('\\.s$|\\.deathlast|\\.brain', '', deathvar)) %>%
  separate(deathvar, into = c('deathvar', 'timept')) %>%
  spread(key = deathvar, deathvalue) %>%
  mutate(died = gsub(' .+$', '', died),
         days = as.numeric(days),
         cohort.f = factor(cohort.mort.il6,
                           labels = c('Excluded from\nfull NUTRIC', 'Included in\nboth models')),
         timept.f = factor(ifelse(timept == 'inhosp', 1,
                           ifelse(timept == '90', 2, 3)),
                           levels = 1:3, labels = c('In-Hospital', '90 Days', '365 Days')))

boxplot.daysdeath <- ggplot(data = explore.mort.data, aes(x = cohort.mort.il6, y = days)) +
  facet_wrap(~ timept.f, nrow = 1, scales = 'free_y') +
  geom_boxplot(colour = 'grey80', outlier.shape = NA, fill = NA) +
  geom_point(aes(colour = died),
             position = position_jitter(width = 0.5, height = 0.1), alpha = 0.3, size = 0.75) +
  scale_colour_discrete(name = 'Died during period') +
  scale_x_discrete(name = 'Included in full NUTRIC mortality models') +
  scale_y_continuous(name = 'Days to death or censoring') +
  theme(legend.title = element_text(size = 8),
        legend.text = element_text(size = 7),
        legend.key.size = unit(0.3, 'cm'),
        legend.position = 'bottom', legend.direction = 'horizontal',
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 7))

boxplot.modnutric <- ggplot(data = brain.oneobs,
                            aes(x = cohort.mort.il6, y = nutric.noil6, colour = cohort.mort.il6)) +
  geom_boxplot(aes(fill = cohort.mort.il6), alpha = 0.3) +
  geom_point(position = position_jitter(width = 0.5, height = 0.1), alpha = 0.3) +
  scale_x_discrete(name = 'Included in full NUTRIC\nmortality models') +
  scale_y_continuous(breaks = 0:9, name = 'Modified NUTRIC') +
  scale_colour_manual(values = c('#BA6E00', '#003D79'), guide = FALSE) +
  scale_fill_manual(values = c('#BA6E00', '#003D79'), guide = FALSE) +
  theme(axis.title = element_text(size = 8),
        axis.text = element_text(size = 7))

# ggplot(data = subset(brain.oneobs, cohort.mort.il6),
#        aes(x = nutric.il6, y = days.deathlast.inhosp.s)) +
#   geom_boxplot(aes(group = nutric.il6), colour = 'grey50', outlier.shape = NA, fill = NA) +
#   geom_point(aes(colour = died.inhosp.s),
#              position = position_jitter(width = 0.5), alpha = 0.5, size = 0.75) +
#   scale_x_continuous(breaks = 0:10) +
#   scale_colour_discrete(labels = c('Discharged', 'Died')) +
#   theme(#legend.position = 'bottom', legend.direction = 'horizontal',
#         legend.title = element_text(size = 6), legend.text = element_text(size = 6),
#         axis.title = element_text(size = 7),
#         axis.text = element_text(size = 7))

multiplot(boxplot.daysdeath, boxplot.modnutric, layout = matrix(c(1, 1, 2), nrow = 1))

@

\clearpage
\section{NUTRIC vs Hospital Discharge Location}
<<dchomemodels>>=
## -- Run models -----------------------------------------------------------------------------------
dchome.il6 <- fit.mult.impute(as.formula(paste('dc.home', lt.il6.rh, sep = ' ~ ')),
                              fitter = lrm,
                              xtrans = mice.il6.survivors,
                              data = modeldata.il6.survivors)

dchome.noil6 <- fit.mult.impute(as.formula(paste('dc.home', lt.noil6.rh, sep = ' ~ ')),
                                fitter = lrm,
                                xtrans = mice.noil6.survivors,
                                data = modeldata.noil6.survivors)

## -- Calculate ORs + CIs, predicted values --------------------------------------------------------
options(datadist = 'dd.il6.survivors')
dchome.sum.il6 <- summary(dchome.il6, nutric.il6 = nutric.il6.pct.survivors)
dchome.pred.il6 <- Predict(dchome.il6, nutric.il6 = NA, fun = plogis)

options(datadist = 'dd.noil6.survivors')
dchome.sum.noil6 <- summary(dchome.noil6, nutric.noil6 = nutric.noil6.pct.survivors)
dchome.pred.noil6 <- Predict(dchome.noil6, nutric.noil6 = NA, fun = plogis)

dchome.nutric.plot <- create.nutric.plot('dchome')
dchome.nutric.table <- results.table('dchome')

@

To examine the association between NUTRIC scores and discharge location among hospital survivors,
we used logistic regression (outcome = home vs not home).

There is a strong association between higher NUTRIC scores, with or without IL-6, at baseline and
increased odds of being discharged to somewhere other than home.

Table \ref{table:dchomeresults} shows p-values for the total association of NUTRIC score with
discharge location and odds ratios comparing the 75th to the 25th percentiles of our cohort of survivors' NUTRIC scores. Figure \ref{fig:printdchomemodels} shows the adjusted probability of being
discharged to a location other than home for an otherwise ``average" patient, given a specific
NUTRIC score at baseline.
  
<<printdchomemodels, results = 'asis', fig.cap = 'NUTRIC Score at ICU Admission vs Discharge to Location Other than Home', fig.height=3.5>>=
latex(dchome.nutric.table[,c('comp.str.il6', 'peci.str.il6', 'pval.str.il6',
                             'peci.str.noil6', 'pval.str.noil6')],
     file = '',
     where = '!h',
     caption = 'NUTRIC Score at ICU Admission vs Discharge to Location Other than Home',
     caption.lot = 'NUTRIC vs Discharge Location',
     label = 'table:dchomeresults',
     rowname = NULL,
     colheads = c('NUTRIC Score Comparison*', rep(c('HR (95\\% CI)', 'P-Value'), 2)),
     col.just = c('c', rep('r', 4)),
     cgroup = c('', 'NUTRIC with IL-6', 'NUTRIC without IL-6'),
     n.cgroup = c(1, 2, 2),
     insert.bottom = nutric.note)

dchome.nutric.plot

@

\clearpage
\section{NUTRIC vs Long-Term Cognition, Disability and Quality of Life}
Results for the associations between NUTRIC scores and long-term cognitive and disability outcomes
follow.

\subsection{NUTRIC Scores vs ADLs (Katz ADL)}
To examine the association between NUTRIC scores and Katz ADL scores among patients with long-term
outcomes available, we used negative binomial regression.

<<adlmodels>>=
## -- 3-month ADL ----------------------------------------------------------------------------------
## Fit models without NUTRIC score to use in pool.compare()
adl.nonutric.il6.3 <-
  with(mice.il6.3, glm.nb(as.formula(paste('adl.3', lt.nonutric.rh, sep = ' ~ '))))
adl.nonutric.noil6.3 <-
  with(mice.noil6.3, glm.nb(as.formula(paste('adl.3', lt.nonutric.rh, sep = ' ~ '))))

## Fit 3-month models
adl.il6.3 <- with(mice.il6.3, glm.nb(as.formula(paste('adl.3', lt.il6.rh, sep = ' ~ '))))
adl.noil6.3 <- with(mice.noil6.3, glm.nb(as.formula(paste('adl.3', lt.noil6.rh, sep = ' ~ '))))

## -- 12-month ADL ---------------------------------------------------------------------------------
## Fit model without NUTRIC score to use in pool.compare()
adl.nonutric.il6.12 <-
  with(mice.il6.12, glm.nb(as.formula(paste('adl.12', lt.nonutric.rh, sep = ' ~ '))))
adl.nonutric.noil6.12 <-
  with(mice.noil6.12, glm.nb(as.formula(paste('adl.12', lt.nonutric.rh, sep = ' ~ '))))

## Fit 12-month models
adl.il6.12 <- with(mice.il6.12, glm.nb(as.formula(paste('adl.12', lt.il6.rh, sep = ' ~ '))))
adl.noil6.12 <- with(mice.noil6.12, glm.nb(as.formula(paste('adl.12', lt.noil6.rh, sep = ' ~ '))))

## -- Calculate and plot predicted values ----------------------------------------------------------
adl.nutric.plot <- create.nutric.plot('adl')
adl.nutric.table <- results.table('adl')

@

There is a potential association between NUTRIC scores at baseline and ADL scores at 3 months;
this association is nonlinear, so please see Figure \ref{fig:printadlmodels}, which presents adjusted Katz ADL scores for an otherwise ``average" patient with each NUTRIC value, for a full
picture. Generally, lower NUTRIC scores don't have much of a relationship with ADL scores; higher
NUTRIC scores are associated with slightly higher ADL scores at 3 months. By 12 months, however,
this association disappears.

Table \ref{table:adlresults} shows p-values for the total association of NUTRIC score with Katz ADL
score and incidence rate ratios comparing the 75th to the 25th percentiles of our population's
NUTRIC scores. Here, IRRs can be interpreted as the ratio of the Katz ADL score of someone at the
75th percentile of NUTRIC compared to someone with the 25th percentile. For example, an IRR of 1.5
would indicate that, all other things equal, someone whose NUTRIC was
\Sexpr{quantile(subset(brain.oneobs, cohort.lt)$nutric.il6, na.rm = TRUE, probs = 0.75)} (75th
percentile) had on average an ADL score that was 50\% higher than someone with a NUTRIC of
\Sexpr{quantile(subset(brain.oneobs, cohort.lt)$nutric.il6, na.rm = TRUE, probs = 0.25)} (25th
percentile).
  
<<printadlmodels, results = 'asis', fig.cap = 'NUTRIC Score at ICU Admission vs Katz ADL Scores at 3 \\& 12 Months'>>=
latex(adl.nutric.table[,c('time.f', 'comp.str.il6', 'peci.str.il6', 'pval.str.il6',
                          'peci.str.noil6', 'pval.str.noil6')],
      file = '',
      where = '!h',
      caption = 'NUTRIC Score at ICU Admission vs Katz ADL Scores at 3 \\& 12 Months',
      caption.lot = 'NUTRIC vs ADLs (Katz ADL Scores)',
      label = 'table:adlresults',
      rowname = NULL,
      colheads = c('Followup Time', 'NUTRIC Score Comparison*',
                   rep(c('IRR (95\\% CI)', 'P-Value'), 2)),
      col.just = c('l', 'c', rep('r', 4)),
      cgroup = c('', 'NUTRIC with IL-6', 'NUTRIC without IL-6'),
      n.cgroup = c(2, 2, 2),
      insert.bottom = nutric.note)

adl.nutric.plot

@

\clearpage
\subsection{NUTRIC Scores vs IADLs (Functional Activities Questionnaire)}
<<faqmodels>>=
## -- 3-month FAQ ----------------------------------------------------------------------------------
## Fit models without NUTRIC score to use in pool.compare()
faq.nonutric.il6.3 <-
  with(mice.il6.3, glm.nb(as.formula(paste('faq.3', lt.nonutric.rh, sep = ' ~ '))))
faq.nonutric.noil6.3 <-
  with(mice.noil6.3, glm.nb(as.formula(paste('faq.3', lt.nonutric.rh, sep = ' ~ '))))

## Fit 3-month models
faq.il6.3 <- with(mice.il6.3, glm.nb(as.formula(paste('faq.3', lt.il6.rh, sep = ' ~ '))))
faq.noil6.3 <- with(mice.noil6.3, glm.nb(as.formula(paste('faq.3', lt.noil6.rh, sep = ' ~ '))))

## -- 12-month FAQ ---------------------------------------------------------------------------------
## Fit model without NUTRIC score to use in pool.compare()
faq.nonutric.il6.12 <-
  with(mice.il6.12, glm.nb(as.formula(paste('faq.12', lt.nonutric.rh, sep = ' ~ '))))
faq.nonutric.noil6.12 <-
  with(mice.noil6.12, glm.nb(as.formula(paste('faq.12', lt.nonutric.rh, sep = ' ~ '))))

## Fit 12-month models
faq.il6.12 <- with(mice.il6.12, glm.nb(as.formula(paste('faq.12', lt.il6.rh, sep = ' ~ '))))
faq.noil6.12 <- with(mice.noil6.12, glm.nb(as.formula(paste('faq.12', lt.noil6.rh, sep = ' ~ '))))

## -- Calculate and plot predicted values ----------------------------------------------------------
faq.nutric.plot <- create.nutric.plot('faq')
faq.nutric.table <- results.table('faq')

@

To examine the association between NUTRIC scores and FAQ scores among patients with long-term
outcomes available, we used negative binomial regression. We see no meaningful association between NUTRIC score at baseline and score on the Functional Activities Questionnaire at either followup time.

Figure \ref{fig:printfaqmodels} shows the full relationships between baseline NUTRIC score and
followup FAQ scores for an otherwise ``average" patient. Table \ref{table:faqresults} shows p-values
for the total association of NUTRIC score with FAQ score and incidence rate ratios comparing the
75th to the 25th percentiles of our population's NUTRIC scores. Here, IRRs can be interpreted as the
ratio of the FAQ score of someone at the 75th percentile of NUTRIC compared to someone with the 25th
percentile. For example, an IRR of 1.5 would indicate that, all other things equal, someone whose
NUTRIC was \Sexpr{quantile(subset(brain.oneobs, cohort.lt)$nutric.il6, na.rm = TRUE, probs = 0.75)}
(75th percentile) had on average an FAQ score that was 50\% higher than someone with a NUTRIC of
\Sexpr{quantile(subset(brain.oneobs, cohort.lt)$nutric.il6, na.rm = TRUE, probs = 0.25)} (25th
percentile).
  
<<printfaqmodels, results = 'asis', fig.cap = 'NUTRIC Score at ICU Admission vs IADLs (FAQ Scores) at 3 \\& 12 Months'>>=
latex(faq.nutric.table[,c('time.f', 'comp.str.il6', 'peci.str.il6', 'pval.str.il6',
                          'peci.str.noil6', 'pval.str.noil6')],
      file = '',
      where = '!h',
      caption = 'NUTRIC Score at ICU Admission vs IADLs (FAQ Scores) at 3 \\& 12 Months',
      caption.lot = 'NUTRIC vs IADLs (FAQ Scores)',
      label = 'table:faqresults',
      rowname = NULL,
      colheads = c('Followup Time', 'NUTRIC Score Comparison*',
                   rep(c('IRR (95\\% CI)', 'P-Value'), 2)),
      col.just = c('l', 'c', rep('r', 4)),
      cgroup = c('', 'NUTRIC with IL-6', 'NUTRIC without IL-6'),
      n.cgroup = c(2, 2, 2),
      insert.bottom = nutric.note)

faq.nutric.plot

@

\clearpage
\subsection{NUTRIC Scores vs Global Cognition (RBANS Global)}
<<rbansmodels>>=
## -- Fit models -----------------------------------------------------------------------------------
rbans.il6.3 <- fit.mult.impute(as.formula(paste('rbans.global.3', lt.il6.rh, sep = ' ~ ')),
                               fitter = ols,
                               xtrans = mice.il6.3,
                               data = subset(brain.oneobs, cohort.3m.il6))
rbans.noil6.3 <- fit.mult.impute(as.formula(paste('rbans.global.3', lt.noil6.rh, sep = ' ~ ')),
                                 fitter = ols,
                                 xtrans = mice.noil6.3,
                                 data = subset(brain.oneobs, cohort.3m))
rbans.il6.12 <- fit.mult.impute(as.formula(paste('rbans.global.12', lt.il6.rh, sep = ' ~ ')),
                                fitter = ols,
                                xtrans = mice.il6.12,
                                data = subset(brain.oneobs, cohort.12m.il6))
rbans.noil6.12 <- fit.mult.impute(as.formula(paste('rbans.global.12', lt.noil6.rh, sep = ' ~ ')),
                                  fitter = ols,
                                  xtrans = mice.noil6.12,
                                  data = subset(brain.oneobs, cohort.12m))

## -- Calculate differences + CIs, predicted values ------------------------------------------------
options(datadist = 'dd.il6.3')
rbans.sum.il6.3 <- summary(rbans.il6.3, nutric.il6 = nutric.il6.pct.lt)
rbans.pred.il6.3 <- Predict(rbans.il6.3, nutric.il6 = NA)

options(datadist = 'dd.noil6.3')
rbans.sum.noil6.3 <- summary(rbans.noil6.3, nutric.noil6 = nutric.noil6.pct.lt)
rbans.pred.noil6.3 <- Predict(rbans.noil6.3, nutric.noil6 = NA)

options(datadist = 'dd.il6.12')
rbans.sum.il6.12 <- summary(rbans.il6.12, nutric.il6 = nutric.il6.pct.lt)
rbans.pred.il6.12 <- Predict(rbans.il6.12, nutric.il6 = NA)

options(datadist = 'dd.noil6.12')
rbans.sum.noil6.12 <- summary(rbans.noil6.12, nutric.noil6 = nutric.noil6.pct.lt)
rbans.pred.noil6.12 <- Predict(rbans.noil6.12, nutric.noil6 = NA)

rbans.nutric.plot <- create.nutric.plot('rbans')
rbans.nutric.table <- results.table('rbans')

@

To examine the association between NUTRIC scores and RBANS global scores among patients with
long-term outcomes available, we used linear regression. We see no meaningful association between NUTRIC score at baseline and RBANS global cognition score at either followup time.

Figure \ref{fig:printrbansmodels} shows the full relationships between baseline NUTRIC score and
followup RBANS scores for otherwise ``average" patients. Table \ref{table:rbansresults} shows
p-values for the total association of NUTRIC score with FAQ score and adjusted differences in RBANS
scores between the 75th and the 25th percentiles of our population's NUTRIC scores.
  
<<printrbansmodels, results = 'asis', fig.cap = 'NUTRIC Score at ICU Admission vs Global Cognition (RBANS Global Scores) at 3 \\& 12 Months'>>=
latex(rbans.nutric.table[,c('time.f', 'comp.str.il6', 'peci.str.il6', 'pval.str.il6',
                            'peci.str.noil6', 'pval.str.noil6')],
      file = '',
      where = '!h',
      caption = 'NUTRIC Score at ICU Admission vs Global Cognition (RBANS Global Scores) at 3 \\& 12 Months',
      caption.lot = 'NUTRIC vs Global Cognition (RBANS Global Scores)',
      label = 'table:rbansresults',
      rowname = NULL,
      colheads = c('Followup Time', 'NUTRIC Score Comparison*',
                   rep(c('Difference (95\\% CI)', 'P-Value'), 2)),
      col.just = c('l', 'c', rep('r', 4)),
      cgroup = c('', 'NUTRIC with IL-6', 'NUTRIC without IL-6'),
      n.cgroup = c(2, 2, 2),
      insert.bottom = nutric.note)

rbans.nutric.plot

@

\clearpage
\subsection{NUTRIC Scores vs Executive Function (Trails B)}
<<trailbmodels>>=
## -- Fit models -----------------------------------------------------------------------------------
trailb.il6.3 <- fit.mult.impute(as.formula(paste('trail.b.3', lt.il6.rh, sep = ' ~ ')),
                                fitter = ols,
                                xtrans = mice.il6.3,
                                data = subset(brain.oneobs, cohort.3m.il6))
trailb.noil6.3 <- fit.mult.impute(as.formula(paste('trail.b.3', lt.noil6.rh, sep = ' ~ ')),
                                  fitter = ols,
                                  xtrans = mice.noil6.3,
                                  data = subset(brain.oneobs, cohort.3m))
trailb.il6.12 <- fit.mult.impute(as.formula(paste('trail.b.12', lt.il6.rh, sep = ' ~ ')),
                                 fitter = ols,
                                 xtrans = mice.il6.12,
                                 data = subset(brain.oneobs, cohort.12m.il6))
trailb.noil6.12 <- fit.mult.impute(as.formula(paste('trail.b.12', lt.noil6.rh, sep = ' ~ ')),
                                   fitter = ols,
                                   xtrans = mice.noil6.12,
                                   data = subset(brain.oneobs, cohort.12m))

## -- Calculate differences + CIs, predicted values ------------------------------------------------
options(datadist = 'dd.il6.3')
trailb.sum.il6.3 <- summary(trailb.il6.3, nutric.il6 = nutric.il6.pct.lt)
trailb.pred.il6.3 <- Predict(trailb.il6.3, nutric.il6 = NA)

options(datadist = 'dd.noil6.3')
trailb.sum.noil6.3 <- summary(trailb.noil6.3, nutric.noil6 = nutric.noil6.pct.lt)
trailb.pred.noil6.3 <- Predict(trailb.noil6.3, nutric.noil6 = NA)

options(datadist = 'dd.il6.12')
trailb.sum.il6.12 <- summary(trailb.il6.12, nutric.il6 = nutric.il6.pct.lt)
trailb.pred.il6.12 <- Predict(trailb.il6.12, nutric.il6 = NA)

options(datadist = 'dd.noil6.12')
trailb.sum.noil6.12 <- summary(trailb.noil6.12, nutric.noil6 = nutric.noil6.pct.lt)
trailb.pred.noil6.12 <- Predict(trailb.noil6.12, nutric.noil6 = NA)

trailb.nutric.plot <- create.nutric.plot('trailb')
trailb.nutric.table <- results.table('trailb')

@

To examine the association between NUTRIC scores and Trails B t-scores among patients with
long-term outcomes available, we used linear regression. We see no meaningful association between NUTRIC score at baseline and Trails B t-scores at either followup time.

Figure \ref{fig:printtrailbmodels} shows the full relationships between baseline NUTRIC score and
followup Trails B scores for otherwise ``average" patients. Table \ref{table:trailbresults} shows
p-values for the total association of NUTRIC score with Trails B t-score and adjusted differences in
Trails B t-scores between the 75th and the 25th percentiles of our population's NUTRIC scores.
  
<<printtrailbmodels, results = 'asis', fig.cap = 'NUTRIC Score at ICU Admission vs Executive Function (Trails B T-Scores) at 3 \\& 12 Months'>>=
latex(trailb.nutric.table[,c('time.f', 'comp.str.il6', 'peci.str.il6', 'pval.str.il6',
                            'peci.str.noil6', 'pval.str.noil6')],
      file = '',
      where = '!h',
      caption = 'NUTRIC Score at ICU Admission vs Executive Function (Trails B T-Scores) at 3 \\& 12 Months',
      caption.lot = 'NUTRIC vs Executive Function (Trails B T-Scores)',
      label = 'table:trailbresults',
      rowname = NULL,
      colheads = c('Followup Time', 'NUTRIC Score Comparison*',
                   rep(c('Difference (95\\% CI)', 'P-Value'), 2)),
      col.just = c('l', 'c', rep('r', 4)),
      cgroup = c('', 'NUTRIC with IL-6', 'NUTRIC without IL-6'),
      n.cgroup = c(2, 2, 2),
      insert.bottom = nutric.note)

trailb.nutric.plot

@

\clearpage
\subsection{NUTRIC Scores vs Physical Quality of Life (SF-36 PCS)}
<<pcsmodels>>=
## -- Fit models -----------------------------------------------------------------------------------
pcs.il6.3 <- fit.mult.impute(as.formula(paste('sf36.pcs.3', lt.il6.rh, sep = ' ~ ')),
                             fitter = ols,
                             xtrans = mice.il6.3,
                             data = subset(brain.oneobs, cohort.3m.il6))
pcs.noil6.3 <- fit.mult.impute(as.formula(paste('sf36.pcs.3', lt.noil6.rh, sep = ' ~ ')),
                               fitter = ols,
                               xtrans = mice.noil6.3,
                               data = subset(brain.oneobs, cohort.3m))
pcs.il6.12 <- fit.mult.impute(as.formula(paste('sf36.pcs.12', lt.il6.rh, sep = ' ~ ')),
                              fitter = ols,
                              xtrans = mice.il6.12,
                              data = subset(brain.oneobs, cohort.12m.il6))
pcs.noil6.12 <- fit.mult.impute(as.formula(paste('sf36.pcs.12', lt.noil6.rh, sep = ' ~ ')),
                                fitter = ols,
                                xtrans = mice.noil6.12,
                                data = subset(brain.oneobs, cohort.12m))

## -- Calculate differences + CIs, predicted values ------------------------------------------------
options(datadist = 'dd.il6.3')
pcs.sum.il6.3 <- summary(pcs.il6.3, nutric.il6 = nutric.il6.pct.lt)
pcs.pred.il6.3 <- Predict(pcs.il6.3, nutric.il6 = NA)

options(datadist = 'dd.noil6.3')
pcs.sum.noil6.3 <- summary(pcs.noil6.3, nutric.noil6 = nutric.noil6.pct.lt)
pcs.pred.noil6.3 <- Predict(pcs.noil6.3, nutric.noil6 = NA)

options(datadist = 'dd.il6.12')
pcs.sum.il6.12 <- summary(pcs.il6.12, nutric.il6 = nutric.il6.pct.lt)
pcs.pred.il6.12 <- Predict(pcs.il6.12, nutric.il6 = NA)

options(datadist = 'dd.noil6.12')
pcs.sum.noil6.12 <- summary(pcs.noil6.12, nutric.noil6 = nutric.noil6.pct.lt)
pcs.pred.noil6.12 <- Predict(pcs.noil6.12, nutric.noil6 = NA)

pcs.nutric.plot <- create.nutric.plot('pcs')
pcs.nutric.table <- results.table('pcs')

@

To examine the association between NUTRIC scores and SF-36 physical component scores among patients
with long-term outcomes available, we used linear regression. There is a meaningful and very
nonlinear association between NUTRIC scores at baseline and SF-36 PCS scores at 3 months; this
relationship is not apparent at 12 months.

Figure \ref{fig:printpcsmodels} shows the full relationships between baseline NUTRIC score and
followup SF-36 PCS scores for otherwise ``average" patients. Table \ref{table:pcsresults} shows
p-values for the total association of NUTRIC score with SF-36 PCS score and adjusted differences in
SF-36 PCS scores between the 75th and the 25th percentiles of our population's NUTRIC scores.
  
<<printpcsmodels, results = 'asis', fig.cap = 'NUTRIC Score at ICU Admission vs Physical Quality of Life (SF-36 PCS) at 3 \\& 12 Months'>>=
latex(pcs.nutric.table[,c('time.f', 'comp.str.il6', 'peci.str.il6', 'pval.str.il6',
                          'peci.str.noil6', 'pval.str.noil6')],
      file = '',
      where = '!h',
      caption = 'NUTRIC Score at ICU Admission vs Physical Quality of Life (SF-36 PCS) at 3 \\& 12 Months',
      caption.lot = 'NUTRIC vs Physical Quality of Life (SF-36 PCS)',
      label = 'table:pcsresults',
      rowname = NULL,
      colheads = c('Followup Time', 'NUTRIC Score Comparison*',
                   rep(c('Difference (95\\% CI)', 'P-Value'), 2)),
      col.just = c('l', 'c', rep('r', 4)),
      cgroup = c('', 'NUTRIC with IL-6', 'NUTRIC without IL-6'),
      n.cgroup = c(2, 2, 2),
      insert.bottom = nutric.note)

pcs.nutric.plot

@

\clearpage
\subsection{NUTRIC Scores vs Mental Quality of Life (SF-36 MCS)}
<<mcsmodels>>=
## -- Fit models -----------------------------------------------------------------------------------
mcs.il6.3 <- fit.mult.impute(as.formula(paste('sf36.mcs.3', lt.il6.rh, sep = ' ~ ')),
                             fitter = ols,
                             xtrans = mice.il6.3,
                             data = subset(brain.oneobs, cohort.3m.il6))
mcs.noil6.3 <- fit.mult.impute(as.formula(paste('sf36.mcs.3', lt.noil6.rh, sep = ' ~ ')),
                               fitter = ols,
                               xtrans = mice.noil6.3,
                               data = subset(brain.oneobs, cohort.3m))
mcs.il6.12 <- fit.mult.impute(as.formula(paste('sf36.mcs.12', lt.il6.rh, sep = ' ~ ')),
                              fitter = ols,
                              xtrans = mice.il6.12,
                              data = subset(brain.oneobs, cohort.12m.il6))
mcs.noil6.12 <- fit.mult.impute(as.formula(paste('sf36.mcs.12', lt.noil6.rh, sep = ' ~ ')),
                                fitter = ols,
                                xtrans = mice.noil6.12,
                                data = subset(brain.oneobs, cohort.12m))

## -- Calculate differences + CIs, predicted values ------------------------------------------------
options(datadist = 'dd.il6.3')
mcs.sum.il6.3 <- summary(mcs.il6.3, nutric.il6 = nutric.il6.pct.lt)
mcs.pred.il6.3 <- Predict(mcs.il6.3, nutric.il6 = NA)

options(datadist = 'dd.noil6.3')
mcs.sum.noil6.3 <- summary(mcs.noil6.3, nutric.noil6 = nutric.noil6.pct.lt)
mcs.pred.noil6.3 <- Predict(mcs.noil6.3, nutric.noil6 = NA)

options(datadist = 'dd.il6.12')
mcs.sum.il6.12 <- summary(mcs.il6.12, nutric.il6 = nutric.il6.pct.lt)
mcs.pred.il6.12 <- Predict(mcs.il6.12, nutric.il6 = NA)

options(datadist = 'dd.noil6.12')
mcs.sum.noil6.12 <- summary(mcs.noil6.12, nutric.noil6 = nutric.noil6.pct.lt)
mcs.pred.noil6.12 <- Predict(mcs.noil6.12, nutric.noil6 = NA)

mcs.nutric.plot <- create.nutric.plot('mcs')
mcs.nutric.table <- results.table('mcs')

@

To examine the association between NUTRIC scores and SF-36 mental component scores among patients
with long-term outcomes available, we used linear regression. There is a significant association
between higher NUTRIC scores at baseline and higher SF-36 MCS scores at both 3 and 12 months after
hospital discharge.

Figure \ref{fig:printmcsmodels} shows the full relationships between baseline NUTRIC score and
followup SF-36 MCS scores for otherwise ``average" patients. Table \ref{table:mcsresults} shows
p-values for the total association of NUTRIC score with SF-36 MCS score and adjusted differences in
SF-36 MCS scores between the 75th and the 25th percentiles of our population's NUTRIC scores.
  
<<printmcsmodels, results = 'asis', fig.cap = 'NUTRIC Score at ICU Admission vs Mental Quality of Life (SF-36 MCS) at 3 \\& 12 Months'>>=
latex(mcs.nutric.table[,c('time.f', 'comp.str.il6', 'peci.str.il6', 'pval.str.il6',
                          'peci.str.noil6', 'pval.str.noil6')],
      file = '',
      where = '!h',
      caption = 'NUTRIC Score at ICU Admission vs Mental Quality of Life (SF-36 MCS) at 3 \\& 12 Months',
      caption.lot = 'NUTRIC vs Mental Quality of Life (SF-36 MCS)',
      label = 'table:mcsresults',
      rowname = NULL,
      colheads = c('Followup Time', 'NUTRIC Score Comparison*',
                   rep(c('Difference (95\\% CI)', 'P-Value'), 2)),
      col.just = c('l', 'c', rep('r', 4)),
      cgroup = c('', 'NUTRIC with IL-6', 'NUTRIC without IL-6'),
      n.cgroup = c(2, 2, 2),
      insert.bottom = nutric.note)

mcs.nutric.plot

@

% \end{landscape}
\clearpage
\section{Code Used for Analysis}
<<all-code, ref.label=all_labels(), echo = TRUE, eval = FALSE>>=
@

\clearpage
\section{Technical Details}
All analyses were produced using \Sexpr{session_info()$platform$version}, along with the
following attached add-on packages.

<<printpkgs, results='asis'>>=
latex(session_info()$packages[session_info()$packages[,2] == '*', -2], file = '',
      where = '!h',
      rowname = NULL,
      caption = 'List of R Packages Loaded for This Analysis',
      col.just = c('l', 'r', 'r', 'l'),
      colheads = capitalize(names(session_info()$packages)[c(1, 3:ncol(session_info()$packages))]))

@

\end{document}
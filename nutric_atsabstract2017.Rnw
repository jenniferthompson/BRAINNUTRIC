%% -- Specially formatted Latex comment tells RStudio to compile PDF with knitr
% !Rnw weave = knitr

\documentclass{article}

%\usepackage[margin=.5in, landscape]{geometry} %resets margins
\usepackage[margin=.5in]{geometry} %resets margins
\usepackage{hyperref}
\usepackage{lscape}
\usepackage{pdfpages}
\usepackage[section]{placeins}

\title{NUTRIC Scores vs. Mortality, Cognitive and Functional Outcomes\\BRAIN-ICU Cohort Only, for ATS 2017 Abstract}
\date{\today}
\author{Jennifer Thompson, MPH; Supervisor: Rameela Chandrasekhar, PhD}
\begin{document}
% \begin{landscape}
\maketitle
\tableofcontents
\listoftables
\listoffigures
\clearpage

<<setup, include=FALSE, results='hide', cache=FALSE>>=
opts_chunk$set(echo=FALSE, warning = FALSE, message = FALSE, cache = FALSE, error = FALSE, results='hide', fig.width=7, fig.height=(7/1.618), fig.align='center', fig.pos='!h')
options(replace.assign = TRUE, width = 90)

library(devtools)
library(mice)
library(MASS)
library(pscl)
library(rms)
library(caTools)
library(ggplot2)
library(dplyr)
library(tidyr)
library(GGally) ## for ggsurv()

if(Sys.info()['sysname'] == 'Darwin'){
  load('/Volumes/thomps23/ICUDelirium/BRAINICU/braindata.Rdata')
} else{
  load('/home/thomps23/ICUDelirium/BRAINICU/braindata.Rdata')
}

## Method to use in pool.compare() for getting p-values from imputed negative binomial models
use.method <- 'Wald'

## Function to round and format a number to the same number of digits (default = 2)
rndformat <- function(x, digits = 2){
  format(round(x, digits = digits), nsmall = digits)
}

## Function to format p-values
formatp <- function(p){
  ifelse(p < 0.0001, '<0.0001',
  ifelse(p < 0.001, '<0.001',
         rndformat(p, digits = 3)))
}

@

The following analyses look for associations between NUTRIC scores at ICU admission and long-term
outcomes, including mortality, discharge location, disability, and cognition. These initial analyses
use only the BRAIN-ICU cohort for ATS abstract submission; MIND-ICU patients will be added later.

\section{Cohort Descriptions}
<<cohortvars>>=
## Indicator for whether patient had at least partial followup data (any outcomes)
brain.fu$any.outcomes <- rowSums(!is.na(brain.fu[,c('mmse.tscore', 'trail.a.tscore',
                                                    'trail.b.tscore', 'rbans.immmemory.tscore',
                                                    'rbans.visuo.tscore', 'rbans.language.tscore',
                                                    'rbans.attention.tscore',
                                                    'rbans.delayedmem.tscore', 'rbans.global.score',
                                                    'faq.totscore', 'adl.totscore', 'sf36.pcs',
                                                    'sf36.mcs')])) > 0

## All patients with usable data
brain.oneobs$cohort.allpts <- with(brain.oneobs, {
  !(!is.na(studywd.amt) &
      studywd.amt %in% c('2. W/D from Participation and All Data Collected',
                         '4. N/A Study Staff Withdrew Patient')) })
n.allpts <- sum(brain.oneobs$cohort.allpts)

## All patients with usable data and a full NUTRIC score at baseline
brain.oneobs$cohort.allpts.il6 <- with(brain.oneobs, cohort.allpts & !is.na(nutric.il6))
n.allpts.il6 <- sum(brain.oneobs$cohort.allpts.il6)

## All hospital survivors who remained in study
brain.oneobs$cohort.survivors <- with(brain.oneobs, {
  cohort.allpts &
    died.inhosp == 'Alive through or withdrew during hospital stay' &
    (is.na(studywd) | studywd == 'No') })
n.survivors <- sum(brain.oneobs$cohort.survivors)

## All hospital survivors who remained in study and had full NUTRIC at baseline
brain.oneobs$cohort.survivors.il6 <- with(brain.oneobs, cohort.survivors & !is.na(nutric.il6))
n.survivors.il6 <- sum(brain.oneobs$cohort.survivors.il6)

## All patients with long-term outcomes at each time point
brain.oneobs$cohort.3m <- with(brain.oneobs, {
  cohort.survivors & id %in% subset(brain.fu, fu.period == '3 Month' & any.outcomes)$id })
n.3m <- sum(brain.oneobs$cohort.3m)

brain.oneobs$cohort.3m.il6 <- with(brain.oneobs, cohort.3m & !is.na(nutric.il6))
n.3m.il6 <- sum(brain.oneobs$cohort.3m.il6)

brain.oneobs$cohort.12m <- with(brain.oneobs, {
  cohort.survivors & id %in% subset(brain.fu, fu.period == '12 Month' & any.outcomes)$id })
n.12m <- sum(brain.oneobs$cohort.12m)

brain.oneobs$cohort.12m.il6 <- with(brain.oneobs, cohort.12m & !is.na(nutric.il6))
n.12m.il6 <- sum(brain.oneobs$cohort.12m.il6)

## Total number of patients with any long-term outcomes
brain.oneobs$cohort.lt <- with(brain.oneobs, cohort.3m | cohort.12m)
n.lt <- sum(brain.oneobs$cohort.lt)

brain.oneobs$cohort.lt.il6 <- with(brain.oneobs, cohort.3m.il6 | cohort.12m.il6)
n.lt.il6 <- sum(brain.oneobs$cohort.lt.il6)

## Add followup variables to main data set
fu.outcomes <- brain.fu %>%
  filter(fu.period %in% c('3 Month', '12 Month')) %>%
  mutate(faq.rdscore = round(faq.totscore)) %>%
  separate(fu.period, into = c('month', 'toss')) %>%
  dplyr::select(id, month, rbans.global.score, trail.b.tscore, faq.rdscore, adl.totscore,
                sf36.pcs, sf36.mcs) %>%
  gather(key = outcome, value = score, rbans.global.score:sf36.mcs) %>%
  mutate(outcome.time = paste(gsub('\\.[a-z]*score$', '', outcome), month, sep = '.')) %>%
  dplyr::select(id, outcome.time, score) %>%
  spread(key = outcome.time, value = score)

brain.oneobs <- merge(brain.oneobs, fu.outcomes, by = 'id', all = TRUE)

## -- Indicators for whether pt nutritionally at risk (NUTRIC with IL6 >=6, without, >=5) ----------
brain.oneobs$nutric.atrisk.il6 <- with(brain.oneobs, factor(ifelse(is.na(nutric.il6), NA,
                                                            ifelse(nutric.il6 >= 6, 2, 1)),
                                                            levels = 1:2,
                                                            labels = c('No', 'Yes')))

brain.oneobs$nutric.atrisk.noil6 <- with(brain.oneobs, factor(ifelse(is.na(nutric.noil6), NA,
                                                              ifelse(nutric.noil6 >= 5, 2, 1)),
                                                              levels = 1:2,
                                                              labels = c('No', 'Yes')))

## -- Create a table of the number of patients in each cohort --------------------------------------
cohort.ns <- data.frame(cohort = c('In-hospital mortality',
                                   'Discharge location and long-term mortality',
                                   'Long-term cognitive and disability',
                                   '~~~3 months',
                                   '~~~12 months'),
                        n.il6 = c(n.allpts.il6, n.survivors.il6, n.lt.il6, n.3m.il6, n.12m.il6),
                        n.noil6 = c(n.allpts, n.survivors, n.lt, n.3m, n.12m))

@

There were \Sexpr{n.allpts} patients enrolled in the BRAIN-ICU cohort with in-hospital data. Table
\ref{table:ncohort} describes the number of patients included in each analysis. We will not impute
missing NUTRIC scores due to the involvement of IL-6; therefore different numbers of patients will
be included in models using the full vs. the modified NUTRIC score.

<<printncohort, results = 'asis'>>=
latex(cohort.ns, file = '',
      where = '!h',
      caption = 'Number of Patients in Each Analysis Cohort',
      caption.lot = 'Number of Patients in Each Analysis Cohort',
      label = 'table:ncohort',
      rowname = NULL,
      colheads = c('Cohort', 'Using Full NUTRIC', 'Using Modified NUTRIC'),
      col.just = c('l', 'c', 'c'))

@

Tables \ref{table:descinhosp} and \ref{table:desclt} describe baseline, in-hospital, and followup
characteristics of all three modified-NUTRIC cohorts (patients included in full-NUTRIC analyses are
a subset of this group). Figure \ref{fig:km365} shows a Kaplan-Meier curve representing mortality
over the year following enrollment for all patients.

Figure \ref{fig:nutricplot} compares full and modified NUTRIC scores (ie, with and without IL-6) by
cohort among patients who have both available (ie, have at least one IL-6 measurement before study
day 5). For the vast majority of patients, these two versions of the NUTRIC are equivalent; in our
cohort, including IL-6 doesn't seem to make very much difference.

<<km365, results='asis', fig.cap='Kaplan-Meier Curve, Mortality up to 365 Days after Enrollment'>>=
## -- Kaplan-Meier curve for 365-day mortality -----------------------------------------------------
## Create Surv object
allmort.Surv <-
  with(brain.oneobs, Surv(time = days.deathlast.365, event = as.numeric(died.brain.365)))

## Create plot
## values = c('#b70808', '#003D79')
ggsurv(survfit(allmort.Surv ~ 1), surv.col = '#003D79', cens.col = '#b70808') +
  scale_colour_manual(values = c('#003D79')) +
  scale_x_continuous(name = 'Days Since Enrollment', breaks = c(0, 30, 90, 180, 365)) +
  scale_y_continuous('Probability Alive') +
  theme_bw()

@

<<desctables>>=
desc.vars <- c('age.enroll', 'sex.pp', 'race.pp', 'edu', 'charlson.score', 'num.comorbid',
               'iqcode.score.e', 'stroke.risk', 'adl.e', 'faq.e', 'frailty', 'icu.type',
               'num.apache', 'sofa', 'nutric.il6', 'nutric.atrisk.il6', 'nutric.noil6',
               'nutric.atrisk.noil6', 'mean.benz.icu', 'mean.op.new.icu', 'mean.prop.icu',
               'mean.dex.icu', 'ever.vent.s', 'vent.los.tot.eo', 'ever.del.s.imp',
               'del.s.imp.eo', 'ever.coma.s.imp', 'coma.s.imp.eo', 'died.inhosp', 'hospdis.loc')
lt.vars <- c('rbans.global.3', 'rbans.global.12', 'trail.b.3', 'trail.b.12', 'adl.3', 'adl.12',
             'faq.3', 'faq.12', 'sf36.pcs.3', 'sf36.pcs.12', 'sf36.mcs.3', 'sf36.mcs.12')

desc.data.all <- brain.oneobs[brain.oneobs$cohort.allpts, c('id', desc.vars, lt.vars)]
desc.data.all$cohort <- 1

desc.data.surv <- brain.oneobs[brain.oneobs$cohort.survivors, c('id', desc.vars, lt.vars)]
desc.data.surv$cohort <- 2

desc.data.lt <- brain.oneobs[brain.oneobs$cohort.lt, c('id', desc.vars, lt.vars)]
desc.data.lt$cohort <- 3

desc.data.all <- rbind(desc.data.all, desc.data.surv, desc.data.lt)
desc.data.all$cohort <- factor(desc.data.all$cohort,
                               levels = 1:3,
                               labels = c('Enrolled Patients',
                                          'Hospital Survivors',
                                          'Long-Term Outcomes'))

## Shorten factor levels
levels(desc.data.all$ever.vent.s) <- levels(desc.data.all$ever.del.s.imp) <-
  levels(desc.data.all$ever.coma.s.imp) <- c('Never', 'Yes')
levels(desc.data.all$died.inhosp) <- c('Survived or w/d in hospital', 'Died in hospital')

## Add/shorten labels
label(desc.data.all$sex.pp) <- 'Sex'
label(desc.data.all$race.pp) <- 'Race'
label(desc.data.all$num.comorbid) <- 'Number of comorbidities'
label(desc.data.all$frailty) <- 'CSHA Frailty, enrollment'
label(desc.data.all$icu.type) <- 'ICU type'
label(desc.data.all$nutric.atrisk.il6) <- 'Nutritionally at risk (NUTRIC >=6)'
label(desc.data.all$nutric.atrisk.noil6) <- 'Nutritionally at risk (mod. NUTRIC >=5)'
label(desc.data.all$mean.benz.icu) <- 'Mean 24h benzos in ICU (midaz)'
label(desc.data.all$mean.op.new.icu) <- 'Mean 24h opioids in ICU (fentanyl)'
label(desc.data.all$mean.prop.icu) <- 'Mean 24h propofol in ICU'
label(desc.data.all$mean.dex.icu) <- 'Mean 24h dex in ICU'
label(desc.data.all$ever.vent.s) <- 'On MV during study period'
label(desc.data.all$ever.del.s.imp) <- 'Delirious during study period'
label(desc.data.all$del.s.imp.eo) <- 'Days delirium among exposed'
label(desc.data.all$ever.coma.s.imp) <- 'Comatose during study period'
label(desc.data.all$coma.s.imp.eo) <- 'Days coma among exposed'
label(desc.data.all$hospdis.loc) <- 'Discharge location'
label(desc.data.all$died.inhosp) <- 'Died in hospital'
label(desc.data.all$rbans.global.3) <- 'RBANS global, 3m'
label(desc.data.all$rbans.global.12) <- 'RBANS global, 12m'
label(desc.data.all$trail.b.3) <- 'Trails B, 3m'
label(desc.data.all$trail.b.12) <- 'Trails B, 12m'
label(desc.data.all$adl.3) <- 'Katz ADL, 3m'
label(desc.data.all$adl.12) <- 'Katz ADL, 12m'
label(desc.data.all$faq.3) <- 'FAQ, 3m'
label(desc.data.all$faq.12) <- 'FAQ, 12m'
label(desc.data.all$sf36.pcs.3) <- 'SF36 PCS, 3m'
label(desc.data.all$sf36.pcs.12) <- 'SF36 PCS, 12m'
label(desc.data.all$sf36.mcs.3) <- 'SF36 MCS, 3m'
label(desc.data.all$sf36.mcs.12) <- 'SF36 MCS, 12m'

## -- Create plot of full vs modified NUTRIC scores ------------------------------------------------
nutric.scatter <- ggplot(data = subset(desc.data.all, !is.na(nutric.il6)),
                         aes(x = nutric.il6, y = nutric.noil6)) +
  facet_wrap(~ cohort, ncol = 3) +
  geom_point(aes(colour = (nutric.il6 == nutric.noil6)),
             position = position_jitter(width = 0.8, height = 0.8), alpha = 0.3, size = 0.6) +
  geom_rug(aes(colour = (nutric.il6 == nutric.noil6)),
           position = position_jitter(width = 0.75), alpha = 0.2) +
  scale_x_continuous(name = 'Full NUTRIC (Including IL-6)', limits = c(-0.5, 10.5), breaks = 0:10) +
  scale_y_continuous(name = 'Modified NUTRIC, Excluding IL-6', limits = c(-0.5, 9.5), breaks = 0:9) +
  scale_colour_manual(name = 'Full NUTRIC = Modified NUTRIC', values = c('#b70808', '#003D79')) +
  theme_bw() +
  theme(legend.position = 'bottom', legend.direction = 'horizontal',
        legend.key.size = unit(0.4, 'cm'),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 8),
        axis.title = element_text(size = 8),
        axis.text = element_text(size = 7))

@

<<printdescstats, results = 'asis'>>=
latex(summaryM(formula(paste(paste(desc.vars, collapse = ' + '), '~ cohort')),
               data = desc.data.all),
      file = '',
      digits = 2,
      where = '!h',
      caption = 'Baseline and In-Hospital Characteristics for Each Cohort',
      caption.lot = 'Baseline and In-Hospital Characteristics for Each Cohort',
      label = 'table:descinhosp',
      prn = FALSE,
      what = '%',
      npct = 'both',
      exclude1 = FALSE,
      size = 'footnotesize',
      prmsd = TRUE)

latex(summaryM(formula(paste(paste(lt.vars, collapse = ' + '), '~ 1')),
               data = subset(desc.data.all, cohort == 'Long-Term Outcomes')),
      file = '',
      digits = 2,
      where = '!h',
      caption = 'Long-Term Outcomes', caption.lot = 'Long-Term Outcomes',
      label = 'table:desclt',
      prn = TRUE,
      what = '%',
      npct = 'both',
      exclude1 = FALSE,
      colheads = c('N', 'Patients with Long-Term Outcomes'),
      prmsd = TRUE)

@

<<nutricplot, results = 'asis', fig.cap='Full vs Modified NUTRIC Scores by Cohort', fig.width=7.5, fig.height=3.75>>=
nutric.scatter

@

\clearpage
\section{General Methods} \label{sec:covars}
All analyses are done using multivariable regression; specific types of regression are noted for
each outcome. All hypothesis testing is done using the \Sexpr{use.method} method.

To avoid bias as much as possible, models for all long-term cognitive and disability outcomes are
done using multiple imputation. All patients with at least partial outcomes data at that time point
are included in the cohort; we use multiple imputation (specifically, predictive mean matching) to
impute both missing covariates and missing outcomes for all of these patients. Amounts of missing
data are reported for each model.

All models include the following covariates (with slight changes as noted for in-hospital mortality,
due to the potential for immortal time bias with this outcome). Most continuous covariates (noted
below) were allowed to have a nonlinear relationship with the outcomes using restricted cubic
splines; other continuous covariates were forced to have a linear relationship, due both to limited
sample size and to lack of variability in those covariates (eg, over 75\% of baseline ADL values
were 0).

\begin{itemize}
\item Baseline characteristics
  \begin{itemize}
  \item Years of education (nonlinear)
  \item CSHA frailty score
  \item Sex
  \item BMI (nonlinear)
  \item IQCODE
  \item Katz ADL
  \item FAQ (nonlinear)
  \end{itemize}
\item In-hospital characteristics
  \begin{itemize}
  \item Mean modified daily SOFA in ICU (nonlinear) (\emph{in-hospital death: daily modified SOFA})
  \item Duration of severe sepsis (nonlinear) (\emph{in-hospital death: daily severe sepsis})
  \item Duration of delirium (nonlinear) (\emph{in-hospital death: daily delirium})
  \item Duration of coma (nonlinear) (\emph{in-hospital death: daily coma})
  \item Duration of mechanical ventilation (nonlinear) (\emph{in-hospital death: daily MV})
  \end{itemize}
\end{itemize}

<<modelsetup>>=
## Create numeric version of baseline frailty
brain.oneobs$frailty.num <- as.numeric(gsub('\\..*$', '', brain.oneobs$frailty))

## -- Long-term cognitive and disability outcomes --------------------------------------------------
## List of model covariates for long-term outcomes
lt.covars <- c('edu', 'frailty.num', 'sex.pp', 'bmi', 'iqcode.score.e', 'adl.e', 'faq.e',
               'mean.modsofa.icu', 'icudays.sevseptic.s', 'del.s.imp', 'coma.s.imp',
               'vent.los.tot.s')

## Righthand side of formula without any NUTRIC score - to use in pool.compare()
lt.nonutric.rh <- 'rcs(edu, 3) + frailty.num + sex.pp + rcs(bmi, 3) + iqcode.score.e + adl.e + rcs(faq.e, 3) + rcs(mean.modsofa.icu, 3) + rcs(icudays.sevseptic.s, 3) + rcs(del.s.imp, 3) + rcs(coma.s.imp, 3) + rcs(vent.los.tot.s, 3)'

## Righthand sides of models including NUTRIC
lt.il6.covars <- c(lt.covars, 'nutric.il6')
lt.il6.rh <- paste(lt.nonutric.rh, '+ rcs(nutric.il6, 3)')

lt.noil6.covars <- c(lt.covars, 'nutric.noil6')
lt.noil6.rh <- paste(lt.nonutric.rh, '+ rcs(nutric.noil6, 3)')

## List of variable prefixes for long-term outcomes
lt.outcomes <- c('adl', 'faq', 'rbans.global', 'trail.b', 'sf36.mcs', 'sf36.pcs')

## Create data sets for each model set: two time points, using NUTRIC with/without IL-6
modeldata.il6.3 <- brain.oneobs[brain.oneobs$cohort.3m.il6,
                                c(lt.covars, 'nutric.il6', paste(lt.outcomes, 3, sep = '.'))]

modeldata.il6.12 <- brain.oneobs[brain.oneobs$cohort.12m.il6,
                                 c(lt.covars, 'nutric.il6', paste(lt.outcomes, 12, sep = '.'))]

modeldata.noil6.3 <- brain.oneobs[brain.oneobs$cohort.3m,
                                  c(lt.covars, 'nutric.noil6', paste(lt.outcomes, 3, sep = '.'))]

modeldata.noil6.12 <- brain.oneobs[brain.oneobs$cohort.12m,
                                   c(lt.covars, 'nutric.noil6', paste(lt.outcomes, 12, sep = '.'))]

## Create mice objects for imputation
mice.il6.3 <- mice(data = modeldata.il6.3, m = 10, visitSequence = 'monotone', seed = 56)
mice.il6.12 <- mice(data = modeldata.il6.12, m = 10, visitSequence = 'monotone', seed = 56)
mice.noil6.3 <- mice(data = modeldata.noil6.3, m = 10, visitSequence = 'monotone', seed = 56)
mice.noil6.12 <- mice(data = modeldata.noil6.12, m = 10, visitSequence = 'monotone', seed = 56)

## -- Functions for calculating & plotting results of negative binomial models ---------------------
## -- Step 1: Create design matrix for a given set of covariates -----------------------------------
create.nutric.designmat <- function(formula.rh = c(lt.il6.rh, lt.noil6.rh),
                                      ## which model formula's righthand side to use
                                    xvar,                       ## Which variable should vary?
                                    xpctlimits = c(0.05, 0.95), ## Plotting range in %iles
                                    dataset = brain.oneobs,     ## data set to use
                                    cohort.var = NULL){         ## variable to use to restrict data
  
  ## Get data set to use for all adjustment values
  if(!is.null(cohort.var)){
    usedata <- dataset[dataset[,cohort.var],]
  } else{
    usedata <- dataset
  }
  if(!(xvar %in% names(usedata))){ stop('xvar is not a column in dataset') }
  
  ## Get vector of all original model terms
  modterms <- unlist(strsplit(formula.rh, ' + ', fixed = TRUE))
  
  ## Get information about each covariate:
  ##  variable name, whether numeric and nonlinear, number of knots if applicable
  covar.info <- do.call(rbind, lapply(modterms, FUN = function(v){
    is.nl <- length(grep('^rcs\\(', v)) > 0
    vname <- gsub('^rcs\\(', '', gsub(', *[0-9]+\\)', '', v))
    is.num <- is.numeric(usedata[,vname])
    nknots <- NA
    if(is.nl){
      nknots <- as.numeric(gsub('\\)$', '', strsplit(v, ', *')[[1]][2]))
    }
    data.frame('var' = vname, 'num' = is.num, 'nl' = is.nl, 'nk' = nknots)
  }))
  if(!(xvar %in% covar.info$var)){ stop('xvar is not included in formula.rh') }
  
  ## Which variables do we need to set default values for?
  vars.adj.to <- covar.info[grep(xvar, covar.info$var, invert = TRUE),]

  ## For each of these, set adjustment value as follows  
  adjto.cols <- unlist(lapply(1:nrow(vars.adj.to), FUN = function(vrow){
    ## Function returns a named vector for each variable
    use.var <- as.character(vars.adj.to[vrow, 'var'])
    
    ## If variable is categorical, set to 0 (reference level)
    if(!vars.adj.to[vrow, 'num']){
      vvals <- 0
      names(vvals) <- use.var
    } else{
      set.to <- median(usedata[,use.var], na.rm = TRUE)
      ## If numeric and linear, set to median
      if(!vars.adj.to[vrow, 'nl']){
        vvals <- set.to
        names(vvals) <- use.var
      } else{
        ## If numeric and nonlinear, set to median + spline term(s) for median
        vknots <- rcspline.eval(usedata[,use.var], nk = vars.adj.to[vrow, 'nk'], knots.only = TRUE)
        vvals <- as.numeric(rcspline.eval(set.to, knots = vknots, inclx = TRUE))
        names(vvals) <- paste0(use.var,
                               unlist(lapply(1:(length(vknots) - 1), FUN = function(k){
                                 paste(rep("'", k - 1), collapse = '') })))
      }
    }
    vvals
  }))
  
  ## Get values for X variable and any applicable nonlinear terms
  ## Get all unique values of X variable
  x.vals <- sort(unique(usedata[,xvar]))

  ## Trim to %iles we want to plot, if needed
  if(!is.null(xpctlimits)){
    x.lims <- quantile(x.vals, probs = xpctlimits, na.rm = TRUE)
    x.vals.trim <- x.vals[x.vals >= x.lims[1] & x.vals <= x.lims[2]]
  } else{
    x.vals.trim <- x.vals
  }
  
  ## If X variable is nonlinear, get matrix of [knots - 1] columns
  if(covar.info[covar.info$var == xvar, 'nl']){
    x.knots <- rcspline.eval(usedata[,xvar],
                             nk = covar.info[covar.info$var == xvar, 'nk'],
                             knots.only = TRUE)
    all.x.vals <- as.matrix(rcspline.eval(x.vals.trim, knots = x.knots, inclx = TRUE))
    colnames(all.x.vals) <- paste0(xvar,
                                   unlist(lapply(1:(length(x.knots) - 1), FUN = function(k){
                                     paste(rep("'", k - 1), collapse = '') })))
  } else{
    ## If X variable is linear, create 1-column matrix out of trimmed unique values
    all.x.vals <- matrix(x.vals.trim, ncol = 1)
    colnames(all.x.vals) <- xvar
  }
  
  ## How many rows will be in resulting matrix? (number of X values plotted)
  matrows <- length(x.vals.trim)
  
  ## Create matrix with nrow = number of unique X values, columns = values to adjust covariates to
  adjto.matrix <- matrix(rep(adjto.cols, matrows), ncol = length(adjto.cols), byrow = TRUE)
  colnames(adjto.matrix) <- names(adjto.cols)
  
  ## Bind unique X values + nonlinear terms to covariate values
  designmat <- cbind(adjto.matrix, all.x.vals)
  
  ## Add intercept column
  cbind('(Intercept)' = rep(1, matrows), designmat)
}

## Create design matrices using long-term cohort, one with and without NUTRIC + IL6
lt.designmat.il6 <- create.nutric.designmat(formula.rh = lt.il6.rh,
                                            xvar = 'nutric.il6',
                                            xpctlimits = NULL,
                                            cohort.var = 'cohort.lt')
lt.designmat.noil6 <- create.nutric.designmat(formula.rh = lt.noil6.rh,
                                              xvar = 'nutric.noil6',
                                              xpctlimits = NULL,
                                              cohort.var = 'cohort.lt')

## -- Step 2: Function to, for each row in design matrix, calc pred value & SE from NB model -------
calc.nbresults <- function(nbobj,          ## negbin model object (from glm.nb())
                           designmat,      ## matrix of covariate values; ncols = coefs in nbobj,
                                           ##  must be in correct order
                           xvar,           ## character string: name of variable to put on X axis
                           intvar = NULL){ ## character string: name of interacting variable
  
  is.mice <- 'mira' %in% class(nbobj)
  
  ## Model object must be fit using glm.nb()
  if(!('negbin' %in% class(nbobj) | (is.mice & 'negbin' %in% class(nbobj$analyses[[1]])))){
    stop('nbobj must be of class negbin from glm.nb(), or a mice object using glm.nb to fit')
  }
  
  ## Get coefficients and vcov matrix, depending on whether object is imputed via mice or not
  if(is.mice){
    nb.coefs <- pool(nbobj)$qbar
    nb.vcov <- pool(nbobj)$t
  } else{
    nb.coefs <- coef(nbobj)
    nb.vcov <- vcov(nbobj)
  }
  coefnames <- names(nb.coefs)
  
  ## Make sure number of coefficients in the model != number of columns in design matrix
  if(length(coefnames) != ncol(designmat)){
    stop("Number of model coefficients does not equal number of columns in design matrix")
  }
  
  ## Make sure column names of design matrix match coefficients in order
  ## coefnames.tmp = remove "rcs(...)" from coefficient names, allowing design matrix to have either
  ##  "rcs(age, 3)age, rcs(age, 3)age'" OR "age, age'" as column names
  coefnames.tmp <- gsub('^rcs\\(.*\\)', '', coefnames)
  coefnames.equal <- unlist(lapply(1:ncol(designmat), FUN = function(v){
    colnames(designmat)[v] == coefnames.tmp[v] |
      length(grep(paste0('^', colnames(designmat)[v], '[0-9]*$'), coefnames.tmp[v])) > 0
  }))
  if(sum(!coefnames.equal) != 0){
    stop('names of nbobj coefficients do not match column names of designmat')
  }
  
  if(!(xvar %in% coefnames.tmp)){
    stop("X axis variable name not in column names of design matrix")
  }
  
  ## Calculate linear predictors and their SEs
  lp <- apply(designmat, MARGIN = 1, FUN = function(x){ sum(nb.coefs * as.numeric(x)) })
  lp.se <- apply(designmat, MARGIN = 1, FUN = function(x){ sqrt(t(x) %*% nb.vcov %*% x) })
  
  ## Calculate LCL, UCLs for linear predictors
  lp.lcl <- lp - qnorm(0.975)*lp.se
  lp.ucl <- lp + qnorm(0.975)*lp.se
  
  ## Calculate predicted counts, CIs as exp(quantities)
  count.pe <- exp(lp)
  count.lcl <- exp(lp.lcl)
  count.ucl <- exp(lp.ucl)
  
  ## Bind all results into data frame for plotting
  xvalue <- designmat[,xvar]
  if(!is.null(intvar)){
    intvalue <- designmat[,intvar]
    return(as.data.frame(cbind(xvalue, intvalue, lp, lp.se, count.pe, count.lcl, count.ucl)))
  } else{
    return(as.data.frame(cbind(xvalue, lp, lp.se, count.pe, count.lcl, count.ucl)))
  }
}

## -- Step 3: Project-specific function to create data frame of predicted values for 3/12m, --------
## -- NUTRIC with/without IL-6 ---------------------------------------------------------------------
## -- Negative binomial models ---------------------------------------------------------------------
create.nb.preddata <- function(outcome = c('adl', 'faq')){
  mod.il6.3 <- get(paste0(outcome, '.il6.3'))
  mod.noil6.3 <- get(paste0(outcome, '.noil6.3'))
  mod.il6.12 <- get(paste0(outcome, '.il6.12'))
  mod.noil6.12 <- get(paste0(outcome, '.noil6.12'))
  
  pred.il6.3 <-
    calc.nbresults(nbobj = mod.il6.3, designmat = lt.designmat.il6, xvar = 'nutric.il6')
  pred.noil6.3 <-
    calc.nbresults(nbobj = mod.noil6.3, designmat = lt.designmat.noil6, xvar = 'nutric.noil6')
  pred.il6.12 <-
    calc.nbresults(nbobj = mod.il6.12, designmat = lt.designmat.il6, xvar = 'nutric.il6')
  pred.noil6.12 <-
    calc.nbresults(nbobj = mod.noil6.12, designmat = lt.designmat.noil6, xvar = 'nutric.noil6')
  
  pred.il6.3$time <- pred.noil6.3$time <- 1
  pred.il6.12$time <- pred.noil6.12$time <- 2
  
  pred.il6.3$version <- pred.il6.12$version <- 1
  pred.noil6.3$version <- pred.noil6.12$version <- 2
  
  pred.data <- rbind(pred.il6.3, pred.il6.12, pred.noil6.3, pred.noil6.12)
  pred.data$time.f <- factor(pred.data$time, levels = 1:2, labels = c('3 Months', '12 Months'))
  pred.data$version.f <-
    factor(pred.data$version, levels = 1:2, labels = c('With IL-6', 'Without IL-6'))
  
  pred.data
  
}

## -- Linear regression (ols) models ---------------------------------------------------------------
create.ols.preddata <- function(outcome = c('rbans', 'trailb')){
  mod.il6.3 <- get(paste0(outcome, '.il6.3'))
  mod.noil6.3 <- get(paste0(outcome, '.noil6.3'))
  mod.il6.12 <- get(paste0(outcome, '.il6.12'))
  mod.noil6.12 <- get(paste0(outcome, '.noil6.12'))
  
  pred.il6.3 <- as.data.frame(Predict(mod.il6.3, nutric.il6 = NA))
  names(pred.il6.3)[grep('^nutric', names(pred.il6.3))] <- 'xvalue'
  pred.noil6.3 <- as.data.frame(Predict(mod.noil6.3, nutric.noil6 = NA))
  names(pred.noil6.3)[grep('^nutric', names(pred.noil6.3))] <- 'xvalue'
  pred.il6.12 <- as.data.frame(Predict(mod.il6.12, nutric.il6 = NA))
  names(pred.il6.12)[grep('^nutric', names(pred.il6.12))] <- 'xvalue'
  pred.noil6.12 <- as.data.frame(Predict(mod.noil6.12, nutric.noil6 = NA))
  names(pred.noil6.12)[grep('^nutric', names(pred.noil6.12))] <- 'xvalue'
  
  pred.il6.3$time <- pred.noil6.3$time <- 1
  pred.il6.12$time <- pred.noil6.12$time <- 2
  
  pred.il6.3$version <- pred.il6.12$version <- 1
  pred.noil6.3$version <- pred.noil6.12$version <- 2
  
  pred.data <- rbind(pred.il6.3, pred.il6.12, pred.noil6.3, pred.noil6.12)
  pred.data$time.f <- factor(pred.data$time, levels = 1:2, labels = c('3 Months', '12 Months'))
  pred.data$version.f <-
    factor(pred.data$version, levels = 1:2, labels = c('With IL-6', 'Without IL-6'))
  
  pred.data
  
}

## -- Step 4: Create plot of predicted ADL/FAQ scores vs NUTRIC scores -----------------------------
## -- Both versions and both times in a single plot ------------------------------------------------
## Create data frame of Y axis labels
yaxis.labels <- data.frame(outcome = c('adl', 'faq', 'rbans', 'trailb'),
                           ylabel = c('Katz ADL Score', 'FAQ Score', 'RBANS Global Score',
                                      'Trails B Score'))

## Plotting function
create.nutric.plot <- function(outcome = c('adl', 'faq', 'rbans', 'trailb')){
  ## Get data set of predicted values for each time/version combination; set variable names
  if(outcome %in% c('adl', 'faq')){
    preddata <- create.nb.preddata(outcome)
    x.var <- 'xvalue'
    y.var <- 'count.pe'
    ymin.var <- 'count.lcl'
    ymax.var <- 'count.ucl'
  } else if(outcome %in% c('rbans', 'trailb')){
    preddata <- create.ols.preddata(outcome)
    x.var <- 'xvalue'
    y.var <- 'yhat'
    ymin.var <- 'lower'
    ymax.var <- 'upper'
  }
  
  ## Set Y axis label
  outcome.ylab <- yaxis.labels[match(outcome, yaxis.labels$outcome), 'ylabel']

  ## Create plot, faceted by NUTRIC version and followup time, set to Nate's preferred aesthetic
  ggplot(data = preddata, aes_string(x = x.var, y = y.var, ymin = ymin.var, ymax = ymax.var)) +
    facet_grid(time.f ~ version.f) +
    scale_x_continuous(breaks = seq(0, max(preddata$xvalue), 1),
                       name = 'NUTRIC Score at ICU Admission') +
    scale_y_continuous(name = paste('Adjusted', outcome.ylab)) +
    geom_pointrange(colour = "#003D79") +
    theme_bw()
  
}

## -- Step 5: Calculate IRRs, CIs for specified values of a variable -------------------------------
calc.ratioci.nb <- function(irr.var,          ## which variable to calculate IRR for
                            modobj,           ## model object
                            adjust.to = NULL, ## Adjustment values for main term;
                                              ## default = 75th vs 25th percentile in dataset
                            dataset,          ## data set to use to get adjustment values
                            alpha = 0.05){    ## % CIs
  
  if(!(irr.var %in% names(dataset))){
    stop('irr.var is not in columns of dataset')
  }
  
  ## Get model coefficients, vcov matrix
  modcoefs <- pool(modobj)$qbar
  modvcov <- pool(modobj)$t
  
  ## How many nonlinear terms does var have in the model?
  n.terms <- length(unique(grep(paste0(irr.var, "'*$"), names(modcoefs), value = TRUE)))
  
  ## Determine what values to adjust var terms to (by default, 75th and 25th percentiles of dataset)
  if(is.null(adjust.to)){
    ## Get percentiles for main term
    adjust.to <- as.numeric(quantile(dataset[,irr.var], probs = c(0.25, 0.75), na.rm = TRUE))
  } else if(length(!is.na(as.numeric(marker.adjust))) != 2){
    stop('adjust.to must have exactly two non-missing numeric values')
  }
  
  ## If variable is linear, adjust.to = 2x1 matrix
  if(n.terms == 1){
    adjust.matrix <- matrix(adjust.to, ncol = 1)
  ## Otherwise, adjust.to = 2xn.terms matrix
  } else{
    use.knots <- rcspline.eval(dataset[,irr.var], nk = n.terms + 1, knots.only = TRUE)
    adjust.matrix <- as.matrix(rcspline.eval(adjust.to, knots = use.knots, inclx = TRUE))
  }

  ## Calculate differences in adjustment values - this is what will be multiplied by coefficients  
  adjust.diffs <- adjust.matrix[2,] - adjust.matrix[1,]
  names(adjust.diffs) <- paste0(irr.var,
                                unlist(lapply(1:n.terms, FUN = function(k){
                                  paste(rep("'", k - 1), collapse = '') })))

  ## Which coefficients do we need to use?
  use.coefs <- grep(paste0(irr.var, "'*$"), names(modcoefs))
  use.betas <- modcoefs[use.coefs]
  
  ## Get vcov matrix for involved components
  use.vcov <- modvcov[use.coefs, use.coefs]
  
  ## Calculate each component of linear predictor: beta * xvals
  beta.x <- unlist(lapply(1:length(use.betas), FUN = function(b){
    prod(c(use.betas[b], adjust.diffs[b]))
  }))
  
  irrvar.logor <- sum(beta.x)
  irrvar.or <- exp(irrvar.logor)
  
  ## Calculate SE
  irrvar.se <- sqrt(adjust.diffs %*% use.vcov %*% adjust.diffs)
  
  critval <- 1 - alpha / 2
  
  irrvar.lcl <- exp(irrvar.logor - qnorm(critval)*irrvar.se)
  irrvar.ucl <- exp(irrvar.logor + qnorm(critval)*irrvar.se)
  
  return(c('pointest' = irrvar.or, 'lcl' = irrvar.lcl, 'ucl' = irrvar.ucl,
           'ref.val' = adjust.to[1], 'comp.val' = adjust.to[2]))
}

## -- Step 6: Functions to create data set of results for an outcome, both times & NUTRIC vsns -----
## -- Negative binomial models using mice ----------------------------------------------------------
nb.results.data <- function(outcome = c('adl', 'faq')){
  mod.nonutric.il6.3 <- get(paste0(outcome, '.nonutric.il6.3'))
  mod.il6.3 <- get(paste0(outcome, '.il6.3'))
  mod.nonutric.noil6.3 <- get(paste0(outcome, '.nonutric.noil6.3'))
  mod.noil6.3 <- get(paste0(outcome, '.noil6.3'))
  mod.nonutric.il6.12 <- get(paste0(outcome, '.nonutric.il6.12'))
  mod.il6.12 <- get(paste0(outcome, '.il6.12'))
  mod.nonutric.noil6.12 <- get(paste0(outcome, '.nonutric.noil6.12'))
  mod.noil6.12 <- get(paste0(outcome, '.noil6.12'))
  
  use.data <- subset(brain.oneobs, cohort.lt)
  
  irrci.il6.3 <- calc.ratioci.nb(irr.var = 'nutric.il6', modobj = mod.il6.3, dataset = use.data)
  irrci.noil6.3 <-
    calc.ratioci.nb(irr.var = 'nutric.noil6', modobj = mod.noil6.3, dataset = use.data)
  irrci.il6.12 <- calc.ratioci.nb(irr.var = 'nutric.il6', modobj = mod.il6.12, dataset = use.data)
  irrci.noil6.12 <-
    calc.ratioci.nb(irr.var = 'nutric.noil6', modobj = mod.noil6.12, dataset = use.data)

  p.il6.3 <-
    pool.compare(mod.il6.3, mod.nonutric.il6.3, data = mice.il6.3, method = use.method)$pvalue
  p.noil6.3 <-
    pool.compare(mod.noil6.3, mod.nonutric.noil6.3, data = mice.noil6.3, method = use.method)$pvalue
  p.il6.12 <-
    pool.compare(mod.il6.12, mod.nonutric.il6.12, data = mice.il6.12, method = use.method)$pvalue
  p.noil6.12 <-
    pool.compare(mod.noil6.12, mod.nonutric.noil6.12,
                 data = mice.noil6.12, method = use.method)$pvalue
  
  irrp.data <- as.data.frame(rbind(c(irrci.il6.3, p.il6.3), c(irrci.noil6.3, p.noil6.3),
                                   c(irrci.il6.12, p.il6.12), c(irrci.noil6.12, p.noil6.12)))
  names(irrp.data)[ncol(irrp.data)] <- 'pval'
  
  irrp.data$time.f <- factor(c(1, 1, 2, 2), levels = 1:2, labels = c('3 Months', '12 Months'))
  irrp.data$version.f <-
    factor(c(1, 2, 1, 2), levels = 1:2, labels = c('With IL-6', 'Without IL-6'))
  
  irrp.data$comp.str <- with(irrp.data, paste(comp.val, 'vs.', ref.val))
  irrp.data$peci.str <- with(irrp.data, paste0(rndformat(pointest), ' (',
                                               rndformat(lcl), ', ',
                                               rndformat(ucl), ')'))
  irrp.data$pval.str <- formatp(irrp.data$pval)
  
  irrp.data
  
}

## -- Linear models using rms ----------------------------------------------------------------------
ols.results.data <- function(outcome = c('rbans', 'trailb')){
  mod.il6.3 <- get(paste0(outcome, '.il6.3'))
  mod.noil6.3 <- get(paste0(outcome, '.noil6.3'))
  mod.il6.12 <- get(paste0(outcome, '.il6.12'))
  mod.noil6.12 <- get(paste0(outcome, '.noil6.12'))
  
  sum.il6.3 <- get(paste0(outcome, '.sum.il6.3'))
  sum.noil6.3 <- get(paste0(outcome, '.sum.noil6.3'))
  sum.il6.12 <- get(paste0(outcome, '.sum.il6.12'))
  sum.noil6.12 <- get(paste0(outcome, '.sum.noil6.12'))

  diffci.il6.3 <- sum.il6.3[grep('^nutric', rownames(sum.il6.3)),]
  diffci.noil6.3 <- sum.noil6.3[grep('^nutric', rownames(sum.noil6.3)),]
  diffci.il6.12 <- sum.il6.12[grep('^nutric', rownames(sum.il6.12)),]
  diffci.noil6.12 <- sum.noil6.12[grep('^nutric', rownames(sum.noil6.12)),]
  
  p.list <- lapply(list(mod.il6.3, mod.noil6.3, mod.il6.12, mod.noil6.12), FUN = function(m){
    anova(m)[grep('^nutric', rownames(anova(m))), 'P'] })
  
  diffcip.data <-
    as.data.frame(rbind(c(diffci.il6.3, p.list[[1]]), c(diffci.noil6.3, p.list[[2]]),
                        c(diffci.il6.12, p.list[[3]]), c(diffci.noil6.12, p.list[[4]])))
  names(diffcip.data) <- c('ref.val', 'comp.val', 'diff', 'pointest', 'se', 'lcl', 'ucl',
                           'type', 'pval')

  diffcip.data$time.f <- factor(c(1, 1, 2, 2), levels = 1:2, labels = c('3 Months', '12 Months'))
  diffcip.data$version.f <-
    factor(c(1, 2, 1, 2), levels = 1:2, labels = c('With IL-6', 'Without IL-6'))
  
  diffcip.data$comp.str <- with(diffcip.data, paste(comp.val, 'vs.', ref.val))
  diffcip.data$peci.str <- with(diffcip.data, paste0(rndformat(pointest), ' (',
                                                     rndformat(lcl), ', ',
                                                     rndformat(ucl), ')'))
  diffcip.data$pval.str <- formatp(diffcip.data$pval)
  
  diffcip.data

}

## -- Step 7: Create data set of results from [model type].results.data() formatted for table ------
results.table <- function(outcome = c('adl', 'faq', 'rbans', 'trailb')){
  if(outcome %in% c('adl', 'faq')){
    results.data <- nb.results.data(outcome)
  } else if(outcome %in% c('rbans', 'trailb')){
    results.data <- ols.results.data(outcome)
  }
  
  results.data <- results.data %>%
    dplyr::select(time.f, version.f, comp.str, peci.str, pval.str) %>%
    gather(key = quant, value = quantity, comp.str:pval.str) %>%
    mutate(quant = ifelse(version.f == 'With IL-6',
                          paste0(quant, '.il6'),
                          paste0(quant, '.noil6'))) %>%
    dplyr::select(-version.f) %>%
    spread(key = quant, value = quantity)
  results.data[,c('time.f',
                  'comp.str.il6', 'peci.str.il6', 'pval.str.il6',
                  'comp.str.noil6', 'peci.str.noil6', 'pval.str.noil6')]
}

## -- Create table of missingness for each outcome -------------------------------------------------
## Function to calculate N, % missing for a given mice object
descmiss.mice <- function(miceobj, cohortn){
  nmiss <- miceobj$nmis
  pctmiss <- round((nmiss / cohortn)*100)
  npctmiss <- paste0(pctmiss, '\\% (', nmiss, ')')
  varnames <- gsub('\\.[0-9]+$', '', names(miceobj$nmis))
  data.frame(varname = varnames, npct = npctmiss, stringsAsFactors = FALSE)
}

## Create table for all long-term outcomes (same amount of missingness in each)
lt.mice <- c('mice.il6.3', 'mice.noil6.3', 'mice.il6.12', 'mice.noil6.12')
lt.ns <- c(n.3m.il6, n.3m, n.12m.il6, n.12m)

missing.lt.info <- lapply(1:length(lt.mice),
                          FUN = function(m){ descmiss.mice(get(lt.mice[m]), lt.ns[m]) })
missing.lt.df <- cbind(missing.lt.info[[1]]['varname'],
                       do.call(cbind, lapply(missing.lt.info, FUN = function(m){ m[,'npct'] })))

@

\clearpage
\section{NUTRIC vs Long-Term Cognition and Disability}
Results for the associations between NUTRIC scores and long-term cognitive and disability outcomes
follow. Because all of these models have the same amount of missingness, missingness for each cohort
is presented in Table \ref{table:ltmissing}.

<<printmissinglt, results = 'asis'>>=
latex(missing.lt.df, file = '',
      title = '',
      where = '!h',
      caption = 'Missing Data for Long-Term Outcomes vs NUTRIC at Both Time Points',
      caption.lot = 'Missing Data for Long-Term Outcomes vs NUTRIC at Both Time Points',
      label = 'table:ltmissing',
      rowname = NULL,
      colheads = c('Variable', rep(c('With IL-6', 'Without IL-6'), 2)),
      col.just = c('l', rep('c', 4)),
      cgroup = c('', '3 Months', '12 Months'),
      n.cgroup = c(1, 2, 2))

@

\clearpage
\subsection{NUTRIC Scores vs ADLs (Katz ADL)}
<<adlmodels>>=
## -- 3-month ADL ----------------------------------------------------------------------------------
## Fit models without NUTRIC score to use in pool.compare()
adl.nonutric.il6.3 <-
  with(mice.il6.3, glm.nb(as.formula(paste('adl.3', lt.nonutric.rh, sep = ' ~ '))))
adl.nonutric.noil6.3 <-
  with(mice.noil6.3, glm.nb(as.formula(paste('adl.3', lt.nonutric.rh, sep = ' ~ '))))

## Fit 3-month models
adl.il6.3 <- with(mice.il6.3, glm.nb(as.formula(paste('adl.3', lt.il6.rh, sep = ' ~ '))))
adl.noil6.3 <- with(mice.noil6.3, glm.nb(as.formula(paste('adl.3', lt.noil6.rh, sep = ' ~ '))))

## -- 12-month ADL ---------------------------------------------------------------------------------
## Fit model without NUTRIC score to use in pool.compare()
adl.nonutric.il6.12 <-
  with(mice.il6.12, glm.nb(as.formula(paste('adl.12', lt.nonutric.rh, sep = ' ~ '))))
adl.nonutric.noil6.12 <-
  with(mice.noil6.12, glm.nb(as.formula(paste('adl.12', lt.nonutric.rh, sep = ' ~ '))))

## Fit 12-month models
adl.il6.12 <- with(mice.il6.12, glm.nb(as.formula(paste('adl.12', lt.il6.rh, sep = ' ~ '))))
adl.noil6.12 <- with(mice.noil6.12, glm.nb(as.formula(paste('adl.12', lt.noil6.rh, sep = ' ~ '))))

## -- Calculate and plot predicted values ----------------------------------------------------------
adl.nutric.plot <- create.nutric.plot('adl')
adl.nutric.table <- results.table('adl')
# adl.missing.table <- nb.missing.table('adl')

@

There is a significant association between NUTRIC scores at baseline and ADL scores at 3 months;
this association is nonlinear, so please see Figure \ref{fig:printadlmodels} for a full picture.
Generally, lower NUTRIC scores don't have much of a relationship with ADL scores; higher NUTRIC
scores are associated with slightly higher ADL scores at 3 months. By 12 months, however, this
association disappears.

Table \ref{table:adlresults} shows p-values for the total association of NUTRIC score with Katz ADL
score and incidence rate ratios comparing the 75th to the 25th percentiles of our population's
NUTRIC scores. Here, IRRs can be interpreted as the ratio of the Katz ADL score of someone at the
75th percentile of NUTRIC compared to someone with the 25th percentile. For example, an IRR of 1.5
would indicate that, all other things equal, someone whose NUTRIC was
\Sexpr{quantile(subset(brain.oneobs, cohort.lt)$nutric.il6, na.rm = TRUE, probs = 0.75)} (75th
percentile) had on average an ADL score that was 50\% higher than someone with a NUTRIC of
\Sexpr{quantile(subset(brain.oneobs, cohort.lt)$nutric.il6, na.rm = TRUE, probs = 0.25)} (25th
percentile).
  
<<printadlmodels, results = 'asis', fig.cap = 'NUTRIC Score at ICU Admission vs Katz ADL Scores at 3 \\& 12 Months'>>=
latex(adl.nutric.table[,c('time.f', 'comp.str.il6', 'peci.str.il6', 'pval.str.il6',
                          'peci.str.noil6', 'pval.str.noil6')],
      file = '',
      where = '!h',
      caption = 'NUTRIC Score at ICU Admission vs Katz ADL Scores at 3 \\& 12 Months',
      label = 'table:adlresults',
      rowname = NULL,
      colheads = c('Followup Time', 'NUTRIC Score Comparison*',
                   rep(c('IRR (95\\% CI)', 'P-Value'), 2)),
      col.just = c('l', rep('r', 5)),
      cgroup = c('', 'NUTRIC with IL-6', 'NUTRIC without IL-6'),
      n.cgroup = c(2, 2, 2),
      insert.bottom = '*There was so little difference in NUTRIC scores with and without IL-6 that the percentiles of both versions are the same.')

adl.nutric.plot

# latex(adl.missing.table,
#       file = '',
#       title = '',
#       where = '!h',
#       caption = 'Missing Data for Katz ADL vs NUTRIC at Both Time Points',
#       label = 'table:adlmissing',
#       colheads = rep(c('With IL-6', 'Without IL-6'), 2),
#       col.just = rep('c', 4),
#       cgroup = c('3 Months', '12 Months'),
#       n.cgroup = c(2, 2))

@

\clearpage
\subsection{NUTRIC Scores vs IADLs (Functional Activities Questionnaire)}
<<faqmodels>>=
## -- 3-month FAQ ----------------------------------------------------------------------------------
## Fit models without NUTRIC score to use in pool.compare()
faq.nonutric.il6.3 <-
  with(mice.il6.3, glm.nb(as.formula(paste('faq.3', lt.nonutric.rh, sep = ' ~ '))))
faq.nonutric.noil6.3 <-
  with(mice.noil6.3, glm.nb(as.formula(paste('faq.3', lt.nonutric.rh, sep = ' ~ '))))

## Fit 3-month models
faq.il6.3 <- with(mice.il6.3, glm.nb(as.formula(paste('faq.3', lt.il6.rh, sep = ' ~ '))))
faq.noil6.3 <- with(mice.noil6.3, glm.nb(as.formula(paste('faq.3', lt.noil6.rh, sep = ' ~ '))))

## -- 12-month FAQ ---------------------------------------------------------------------------------
## Fit model without NUTRIC score to use in pool.compare()
faq.nonutric.il6.12 <-
  with(mice.il6.12, glm.nb(as.formula(paste('faq.12', lt.nonutric.rh, sep = ' ~ '))))
faq.nonutric.noil6.12 <-
  with(mice.noil6.12, glm.nb(as.formula(paste('faq.12', lt.nonutric.rh, sep = ' ~ '))))

## Fit 12-month models
faq.il6.12 <- with(mice.il6.12, glm.nb(as.formula(paste('faq.12', lt.il6.rh, sep = ' ~ '))))
faq.noil6.12 <- with(mice.noil6.12, glm.nb(as.formula(paste('faq.12', lt.noil6.rh, sep = ' ~ '))))

## -- Calculate and plot predicted values ----------------------------------------------------------
faq.nutric.plot <- create.nutric.plot('faq')
faq.nutric.table <- results.table('faq')
# faq.missing.table <- nb.missing.table('faq')

@

We see no meaningful association between NUTRIC score at baseline and score on the Functional
Activities Questionnaire at either followup time.

Figure \ref{fig:printfaqmodels} shows the full relationships between baseline NUTRIC score and
followup FAQ scores. Table \ref{table:faqresults} shows p-values for the total association of NUTRIC
score with FAQ score and incidence rate ratios comparing the 75th to the 25th percentiles of our
population's NUTRIC scores. Here, IRRs can be interpreted as the ratio of the FAQ score of someone
at the 75th percentile of NUTRIC compared to someone with the 25th percentile. For example, an IRR
of 1.5 would indicate that, all other things equal, someone whose NUTRIC was
\Sexpr{quantile(subset(brain.oneobs, cohort.lt)$nutric.il6, na.rm = TRUE, probs = 0.75)} (75th
percentile) had on average an FAQ score that was 50\% higher than someone with a NUTRIC of
\Sexpr{quantile(subset(brain.oneobs, cohort.lt)$nutric.il6, na.rm = TRUE, probs = 0.25)} (25th
percentile).
  
<<printfaqmodels, results = 'asis', fig.cap = 'NUTRIC Score at ICU Admission vs IADLs (FAQ Scores) at 3 \\& 12 Months'>>=
latex(faq.nutric.table[,c('time.f', 'comp.str.il6', 'peci.str.il6', 'pval.str.il6',
                          'peci.str.noil6', 'pval.str.noil6')],
      file = '',
      where = '!h',
      caption = 'NUTRIC Score at ICU Admission vs IADLs (FAQ Scores) at 3 \\& 12 Months',
      label = 'table:faqresults',
      rowname = NULL,
      colheads = c('Followup Time', 'NUTRIC Score Comparison*',
                   rep(c('IRR (95\\% CI)', 'P-Value'), 2)),
      col.just = c('l', rep('r', 5)),
      cgroup = c('', 'NUTRIC with IL-6', 'NUTRIC without IL-6'),
      n.cgroup = c(2, 2, 2),
      insert.bottom = '*There was so little difference in NUTRIC scores with and without IL-6 that the percentiles of both versions are the same.')

faq.nutric.plot

# latex(faq.missing.table,
#       file = '',
#       title = '',
#       where = '!h',
#       caption = 'Missing Data for FAQ vs NUTRIC at Both Time Points',
#       label = 'table:faqmissing',
#       colheads = rep(c('With IL-6', 'Without IL-6'), 2),
#       col.just = rep('c', 4),
#       cgroup = c('3 Months', '12 Months'),
#       n.cgroup = c(2, 2))

@

\clearpage
\subsection{NUTRIC Scores vs Global Cognition (RBANS Global)}
<<rbansmodels>>=
ddvars <- c(lt.covars, 'nutric.il6', 'nutric.noil6',
            paste0('rbans.global.', c(3, 12)), paste0('trail.b.', c(3, 12)))
dd.il6.3 <- datadist(subset(brain.oneobs, cohort.3m.il6)[,ddvars])
dd.noil6.3 <- datadist(subset(brain.oneobs, cohort.3m)[,ddvars])
dd.il6.12 <- datadist(subset(brain.oneobs, cohort.12m.il6)[,ddvars])
dd.noil6.12 <- datadist(subset(brain.oneobs, cohort.12m)[,ddvars])

## -- Fit models -----------------------------------------------------------------------------------
rbans.il6.3 <- fit.mult.impute(as.formula(paste('rbans.global.3', lt.il6.rh, sep = ' ~ ')),
                               fitter = ols,
                               xtrans = mice.il6.3,
                               data = subset(brain.oneobs, cohort.3m.il6))
rbans.noil6.3 <- fit.mult.impute(as.formula(paste('rbans.global.3', lt.noil6.rh, sep = ' ~ ')),
                                 fitter = ols,
                                 xtrans = mice.noil6.3,
                                 data = subset(brain.oneobs, cohort.3m))
rbans.il6.12 <- fit.mult.impute(as.formula(paste('rbans.global.12', lt.il6.rh, sep = ' ~ ')),
                                fitter = ols,
                                xtrans = mice.il6.12,
                                data = subset(brain.oneobs, cohort.12m.il6))
rbans.noil6.12 <- fit.mult.impute(as.formula(paste('rbans.global.12', lt.noil6.rh, sep = ' ~ ')),
                                  fitter = ols,
                                  xtrans = mice.noil6.12,
                                  data = subset(brain.oneobs, cohort.12m))

## -- Calculate differences + CIs, predicted values ------------------------------------------------
options(datadist = 'dd.il6.3')
rbans.sum.il6.3 <- summary(rbans.il6.3)
rbans.pred.il6.3 <- Predict(rbans.il6.3, nutric.il6 = NA)

options(datadist = 'dd.noil6.3')
rbans.sum.noil6.3 <- summary(rbans.noil6.3)
rbans.pred.noil6.3 <- Predict(rbans.noil6.3, nutric.noil6 = NA)

options(datadist = 'dd.il6.12')
rbans.sum.il6.12 <- summary(rbans.il6.12)
rbans.pred.il6.12 <- Predict(rbans.il6.12, nutric.il6 = NA)

options(datadist = 'dd.noil6.12')
rbans.sum.noil6.12 <- summary(rbans.noil6.12)
rbans.pred.noil6.12 <- Predict(rbans.noil6.12, nutric.noil6 = NA)

rbans.nutric.plot <- create.nutric.plot('rbans')
rbans.nutric.table <- results.table('rbans')

@


% \end{landscape}
\clearpage
\section{Code Used for Analysis}
<<all-code, ref.label=all_labels(), echo = TRUE, eval = FALSE>>=
@

\clearpage
\section{Technical Details}
All analyses were produced using \Sexpr{session_info()$platform$version}, along with the
following attached add-on packages.

<<printpkgs, results='asis'>>=
latex(session_info()$packages[session_info()$packages[,2] == '*', -2], file = '',
      where = '!h',
      rowname = NULL,
      caption = 'List of R Packages Loaded for This Analysis',
      col.just = c('l', 'r', 'r', 'l'),
      colheads = capitalize(names(session_info()$packages)[c(1, 3:ncol(session_info()$packages))]))

@

\end{document}